{
  "openapi": "3.0.0",
  "info": {
    "title": "Timezynk API",
    "description": "API for Timezynk scheduling system",
    "version": "2.5.0"
  },
  "security": [
    {
      "TZApiAuth": []
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Endpoints for authentication and configuration"
    },
    {
      "name": "Availability",
      "description": "Fetching and updating availability"
    },
    {
      "name": "Invoice",
      "description": "Fetching, updating and creating invoices"
    },
    {
      "name": "User",
      "description": "Calls for fetching and updating the system users."
    },
    {
      "name": "Shift",
      "description": "Calls for fetching and updating scheduled shifts."
    },
    {
      "name": "Time Reports",
      "description": "Time reports are the actual worked time as reported by the user."
    },
    {
      "name": "Registry",
      "description": "The registry handles custom data lists and their definitions."
    },
    {
      "name": "Registry Data",
      "description": "Data contained in a registry."
    },
    {
      "name": "Fields",
      "description": "The fields are used to specify the format for a specific registry instance."
    },
    {
      "name": "Settings",
      "description": "Settings are used to store and retreive configuration parameters."
    },
    {
      "name": "Experimental",
      "description": "These APIs are experimental and and may be changed at any time without warning."
    }
  ],
  "servers": [
    {
      "url": "https://api.timezynk.com/api"
    }
  ],
  "paths": {
    "/availability": {
      "get": {
        "summary": "Fetch availability",
        "tags": [
          "Availability"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/startParam"
          },
          {
            "$ref": "#/components/parameters/endParam"
          },
          {
            "$ref": "#/components/parameters/criteriaParam"
          },
          {
            "in": "query",
            "name": "user-id",
            "description": "Find availability for the given user id",
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of availabilities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Availability"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create availability",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Availability"
              }
            }
          },
          "description": "Availability to be added",
          "required": true
        },
        "tags": [
          "Availability"
        ],
        "responses": {
          "200": {
            "description": "Newly added availability object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Availability"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/availability/{availabilityId}": {
      "get": {
        "summary": "Fetch planned availability",
        "parameters": [
          {
            "name": "availabilityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Availability"
        ],
        "responses": {
          "200": {
            "description": "Availability object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Availability"
                }
              }
            }
          },
          "404": {
            "description": "Availability not found"
          }
        }
      },
      "put": {
        "summary": "Update planned availability",
        "parameters": [
          {
            "name": "availabilityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Availability"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Availability"
        ],
        "responses": {
          "200": {
            "description": "Updated availability object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Availability"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          },
          "404": {
            "description": "Availability not found"
          }
        }
      },
      "delete": {
        "summary": "Delete planned availability",
        "parameters": [
          {
            "name": "availabilityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Availability"
        ],
        "responses": {
          "200": {
            "description": "Delete successful"
          }
        }
      }
    },
    "/booked-shifts": {
      "put": {
        "summary": "Book and unbook users on shifts",
        "tags": [
          "Shift"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShiftBookingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Bookings completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftBookingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/bulk/invoice-rows": {
      "post": {
        "summary": "Create multiple invoice rows",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvoiceRow"
                }
              }
            }
          },
          "description": "Invoice rows to be added",
          "required": true
        },
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Newly added invoice rows",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceRow"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      },
      "delete": {
        "summary": "Delete multiple invoice rows",
        "parameters": [
          {
            "name": "invoice-id",
            "in": "query",
            "required": true,
            "description": "Invoice ID to delete rows for",
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Delete successful"
          }
        }
      }
    },
    "/experimental/blocked-inquiries": {
      "get": {
        "summary": "Find blocked inquiries",
        "description": "Find open inquiries that are blocked by overlapping or adjacent shifts.",
        "tags": [
          "Experimental"
        ],
        "responses": {
          "200": {
            "description": "List blocked inquiries with blocking info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "ObjectId",
                        "description": "Inquiry ID"
                      },
                      "shift-id": {
                        "type": "string",
                        "format": "ObjectId"
                      },
                      "user-id": {
                        "type": "string",
                        "format": "ObjectId"
                      },
                      "duplicity": {
                        "type": "number",
                        "description": "Maximum (and desired) number of booked users"
                      },
                      "booked-users": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "format": "ObjectId"
                        }
                      },
                      "overlapping-shift-ids": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "format": "ObjectId"
                        }
                      },
                      "adjacent-shift-ids": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "format": "ObjectId"
                        }
                      },
                      "overlapping-availability": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "ObjectId"
                            },
                            "available": {
                              "type": "boolean",
                              "description": "True if user is available, false if not available."
                            },
                            "start": {
                              "type": "string",
                              "format": "local-date-time",
                              "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?$",
                              "description": "Start of shift without time zone (i.e. 2019-04-30T15:41:00.000)"
                            },
                            "end": {
                              "type": "string",
                              "format": "local-date-time",
                              "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?$",
                              "description": "End of shift without time zone (i.e. 2019-04-30T15:41:00.000)"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No blocked inquiries found"
          }
        }
      }
    },
    "/fields": {
      "get": {
        "summary": "Index available registry field types",
        "tags": [
          "Fields"
        ],
        "responses": {
          "200": {
            "description": "A list of all valid registry field types. One of these must be the basis for creating a new custom registry field.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/invoices-export": {
      "get": {
        "summary": "Fetch invoice exports",
        "tags": [
          "Invoice"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "query",
            "description": "Target to search for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "State to search for",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "failed",
                "completed",
                "download"
              ]
            }
          },
          {
            "name": "invoice-id",
            "in": "query",
            "description": "Invoice ID to search for",
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of invoice exports",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceExport"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create single invoice export",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceExport"
              }
            }
          },
          "description": "Invoice to be added",
          "required": true
        },
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Newly added invoice export",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceExport"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/invoices-rows": {
      "get": {
        "summary": "Fetch invoice rows",
        "tags": [
          "Invoice"
        ],
        "parameters": [
          {
            "name": "invoice-id",
            "in": "query",
            "required": true,
            "description": "Invoice to fetch the rows for",
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of invoice rows",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceRow"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create single invoice row",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceRow"
              }
            }
          },
          "description": "Invoice to be added",
          "required": true
        },
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Newly added invoice row",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceRow"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/invoices-rows/{rowId}": {
      "get": {
        "summary": "Fetch invoice row",
        "parameters": [
          {
            "name": "rowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Invoice object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceRow"
                }
              }
            }
          },
          "404": {
            "description": "Invoice not found"
          }
        }
      },
      "put": {
        "summary": "Update invoice row",
        "parameters": [
          {
            "name": "rowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceRow"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Updated invoice row object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceRow"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          },
          "404": {
            "description": "Invoice not found"
          }
        }
      },
      "delete": {
        "summary": "Delete invoice row",
        "parameters": [
          {
            "name": "rowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Delete successful"
          }
        }
      }
    },
    "/invoices": {
      "get": {
        "summary": "Fetch invoices",
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Array of invoices",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invoice"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create invoices",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Invoice"
              }
            }
          },
          "description": "Invoice to be added",
          "required": true
        },
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Newly added invoice object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/invoices/{invoiceId}": {
      "get": {
        "summary": "Fetch invoice",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Invoice object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "404": {
            "description": "Invoice not found"
          }
        }
      },
      "put": {
        "summary": "Update invoice",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Invoice"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Updated invoice object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          },
          "404": {
            "description": "Invoice not found"
          }
        }
      },
      "delete": {
        "summary": "Delete invoice",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Delete successful"
          }
        }
      }
    },
    "/oauth2/v1/tokeninfo": {
      "get": {
        "summary": "Token info",
        "description": "Decode your authentication token and check current roles and user.",
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Authentication token information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenInfo"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/published-shifts": {
      "put": {
        "summary": "Publish shifts",
        "tags": [
          "Shift"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShiftPublishRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Bookings completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftPublishResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Unpublish shifts",
        "tags": [
          "Shift"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShiftUnpublishRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Bookings completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftPublishResponse"
                }
              }
            }
          }
        }
      }
    },
    "/registry-data": {
      "get": {
        "summary": "List all registry data",
        "tags": [
          "Registry Data"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "registry-id",
            "description": "Only return data for registry with this ID.",
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of registry data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RegistryData"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new registry data",
        "tags": [
          "Registry Data"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/RegistryData"
        },
        "responses": {
          "200": {
            "description": "Created registry data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryData"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/registry-data/{registryDataId}": {
      "get": {
        "summary": "Get single registry data",
        "tags": [
          "Registry Data"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "registryDataId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registry data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryData"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "put": {
        "summary": "Update registry data",
        "tags": [
          "Registry Data"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "registryDataId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/RegistryData"
        },
        "responses": {
          "200": {
            "description": "Updated registry data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryData"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/registry-fields": {
      "get": {
        "summary": "List custom registry fields",
        "tags": [
          "Fields"
        ],
        "responses": {
          "200": {
            "description": "A list of all custom registry fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Field"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new custom registry field",
        "tags": [
          "Fields"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Field"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Newly created registry field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Field"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/registry": {
      "get": {
        "summary": "Index available registers",
        "tags": [
          "Registry"
        ],
        "responses": {
          "200": {
            "description": "List of all custom registers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Registry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new custom registry",
        "tags": [
          "Registry"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Registry"
        },
        "responses": {
          "200": {
            "description": "Newly created registry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/registry/{registryId}": {
      "get": {
        "summary": "Get single custom registry",
        "tags": [
          "Registry"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "registryId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested registry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            }
          },
          "404": {
            "description": "Registry not found"
          }
        }
      },
      "put": {
        "summary": "Update custom registry",
        "tags": [
          "Registry"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "registryId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Registry"
        },
        "responses": {
          "200": {
            "description": "Updated registry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            }
          },
          "404": {
            "description": "Registry not found"
          }
        }
      }
    },
    "/settings/v1/company": {
      "get": {
        "summary": "Get company settings",
        "description": "Fetch all stored settings for the users company.",
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "description": "Setting values",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Preference"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/settings/v1/company/{settingId}": {
      "get": {
        "summary": "Get company setting",
        "tags": [
          "Settings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "settingId",
            "description": "Setting ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stored value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Preference"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "put": {
        "summary": "Update company setting",
        "description": "Requires `manager` role or `write:company` scope.",
        "tags": [
          "Settings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "settingId",
            "description": "Setting ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Preference"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated setting value",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "delete": {
        "summary": "Delete company setting",
        "description": "Requires `manager` role or `write:company` scope.",
        "tags": [
          "Settings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "settingId",
            "description": "Setting ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Preference object with setting id as key and value null",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Preference"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/shifts": {
      "get": {
        "summary": "Fetch planned shifts",
        "parameters": [
          {
            "$ref": "#/components/parameters/startParam"
          },
          {
            "$ref": "#/components/parameters/endParam"
          },
          {
            "$ref": "#/components/parameters/criteriaParam"
          },
          {
            "in": "query",
            "name": "booked-users",
            "description": "Find shifts where the given user id is booked",
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Shift"
        ],
        "responses": {
          "200": {
            "description": "Array of shifts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shift"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create planned shift",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Shift"
              }
            }
          },
          "description": "Shift to be added",
          "required": true
        },
        "tags": [
          "Shift"
        ],
        "responses": {
          "200": {
            "description": "Newly added shift object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shift"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/shifts/{shiftId}": {
      "get": {
        "summary": "Fetch planned shift",
        "parameters": [
          {
            "name": "shiftId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Shift"
        ],
        "responses": {
          "200": {
            "description": "Shift object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shift"
                }
              }
            }
          },
          "404": {
            "description": "Shift not found"
          }
        }
      },
      "put": {
        "summary": "Update planned shift",
        "parameters": [
          {
            "name": "shiftId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Shift"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Shift"
        ],
        "responses": {
          "200": {
            "description": "Updated shift object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shift"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          },
          "404": {
            "description": "Shift not found"
          }
        }
      },
      "delete": {
        "summary": "Delete planned shift",
        "parameters": [
          {
            "name": "shiftId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Shift"
        ],
        "responses": {
          "200": {
            "description": "Delete successful"
          }
        }
      }
    },
    "/timereports": {
      "get": {
        "summary": "Fetch time reports",
        "tags": [
          "Time Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/startParam"
          },
          {
            "$ref": "#/components/parameters/endParam"
          },
          {
            "$ref": "#/components/parameters/criteriaParam"
          },
          {
            "in": "query",
            "name": "user-id",
            "description": "Find time reports for the given user id",
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of time reports",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Timereport"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new time report",
        "tags": [
          "Time Reports"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Timereport"
        },
        "responses": {
          "200": {
            "description": "Created time report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timereport"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/timereports/{reportId}": {
      "get": {
        "summary": "Fetch time report",
        "tags": [
          "Time Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "reportId",
            "description": "Time report id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Time report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timereport"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "put": {
        "summary": "Update time report",
        "tags": [
          "Time Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "reportId",
            "description": "Time report id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Timereport"
        },
        "responses": {
          "200": {
            "description": "Updated time report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timereport"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Users",
        "description": "The Users endpoint returns information about all the registered users for this company.\n",
        "parameters": [
          {
            "name": "role",
            "in": "query",
            "description": "Search by user role",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "An array of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create user",
        "description": "Add a new user to the company",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "User object to be added to the company",
          "required": true
        },
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "Newly added user object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "summary": "Fetch single user",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single user object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "summary": "Update user",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated user object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Availability": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "Title describing this availability"
              },
              "start": {
                "type": "string",
                "format": "local-date-time",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?$",
                "description": "Start of shift without time zone (i.e. 2019-04-30T15:41:00.000)"
              },
              "end": {
                "type": "string",
                "format": "local-date-time",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?$",
                "description": "End of shift without time zone (i.e. 2019-04-30T15:41:00.000)"
              },
              "user-id": {
                "type": "string",
                "description": "User ID",
                "format": "ObjectId"
              },
              "available": {
                "type": "boolean",
                "description": "Does this mark the user as available or not available."
              },
              "read-only": {
                "type": "boolean",
                "description": "True if this availability is created via an integration and should not be changed.",
                "readOnly": true
              },
              "meta": {
                "type": "object",
                "description": "Field that an integration might use to store meta-data about the availability"
              }
            },
            "required": [
              "start",
              "end",
              "user-id",
              "available"
            ]
          }
        ]
      },
      "BasicObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique shift ID",
            "format": "ObjectId",
            "readOnly": true
          },
          "created": {
            "type": "number",
            "description": "Timestamp in milliseconds for when the object was created",
            "example": 1558604010307,
            "readOnly": true
          },
          "created-by": {
            "type": "string",
            "description": "User ID the the user that created the object.",
            "readOnly": true,
            "format": "ObjectId"
          },
          "changed": {
            "type": "number",
            "description": "Timestamp in milliseconds for when the object was last changed",
            "example": 1558604030403,
            "readOnly": true
          },
          "changed-by": {
            "type": "string",
            "description": "User ID the the user that last changed the object.",
            "readOnly": true,
            "format": "ObjectId"
          },
          "archived": {
            "type": "number",
            "description": "Timestamp in milliseconds for when the object was archived, or null if it is still active",
            "example": null
          }
        },
        "required": [
          "id"
        ]
      },
      "Break": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "format": "local-date-time",
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?$",
            "description": "Start of shift without time zone (i.e. 2019-04-30T15:41:00.000)"
          },
          "end": {
            "type": "string",
            "format": "local-date-time",
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?$",
            "description": "End of shift without time zone (i.e. 2019-04-30T15:41:00.000)"
          }
        },
        "required": [
          "start",
          "end"
        ]
      },
      "DateSelector": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "format": "date",
            "description": "Start of matching interval"
          },
          "end": {
            "type": "string",
            "format": "date",
            "description": "End of matching interval"
          },
          "criteria": {
            "type": "string",
            "description": "Define how to match the interval",
            "enum": [
              "intersects",
              "start-in"
            ],
            "default": "start-in"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Error code"
          },
          "error": {
            "type": "string",
            "description": "Error message"
          },
          "trace": {
            "type": "string",
            "description": "Optional stack trace"
          }
        },
        "required": [
          "code"
        ]
      },
      "Field": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "Human-readable field title"
              },
              "registry-id": {
                "type": "string",
                "format": "ObjectId",
                "description": "Field belongs to this registry"
              },
              "field-id": {
                "type": "string",
                "description": "Reference to Field Type ID"
              },
              "field-type": {
                "type": "string",
                "description": "Field storage type"
              },
              "field-section": {
                "type": "string",
                "description": "Field section ID"
              },
              "weight": {
                "type": "number",
                "description": "Sort order for this field. Lower weight floats on top, higher weight sinks."
              },
              "required": {
                "type": "boolean",
                "description": "Is this field required?"
              },
              "public": {
                "type": "boolean",
                "description": "Allow everyone to see this field value and also show it in deeply linked presentations.\n"
              },
              "protected": {
                "type": "boolean",
                "description": "Field should only the editable by and visible for managers."
              },
              "readonly": {
                "type": "boolean",
                "description": "Field is read-only"
              },
              "override": {
                "type": "string",
                "description": "This field definition overrides a field with this ID."
              },
              "values": {
                "type": "object",
                "description": "Type specific values"
              },
              "settings": {
                "type": "object",
                "description": "Type specific settings"
              }
            },
            "required": [
              "title",
              "registry-id",
              "field-id",
              "field-type",
              "weight"
            ]
          }
        ]
      },
      "FieldType": {
        "type": "object",
        "description": "FieldType describes the different interpretations a custom field can have.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique field type ID",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "Field storage type"
          },
          "section": {
            "type": "string",
            "description": "Field section ID"
          },
          "title": {
            "type": "string",
            "description": "Localized field type title"
          },
          "default": {
            "description": "Default value"
          },
          "max-length": {
            "type": "number",
            "description": "Maximum length of value stored in this field"
          }
        },
        "required": [
          "id",
          "type"
        ]
      },
      "Invoice": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "start-date": {
                "type": "string",
                "format": "local-date",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
                "description": "First day of invoiced interval"
              },
              "end-date": {
                "type": "string",
                "format": "local-date",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
                "description": "Last day of invoiced interval"
              },
              "invoice-date": {
                "type": "string",
                "format": "local-date",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
                "description": "The invoice date (date invoice was created, sent or booked)."
              },
              "due-date": {
                "type": "string",
                "format": "local-date",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
                "description": "Date when invoice is due for payment"
              },
              "currency": {
                "type": "string",
                "description": "Currency in ISO 4217 format",
                "example": "USD"
              },
              "total": {
                "type": "number",
                "description": "Total invoice amount"
              },
              "invoice-text": {
                "type": "string",
                "description": "Longer multi-line message to the invoice receiver"
              },
              "order-no": {
                "type": "string",
                "description": "Order number or code"
              },
              "canceled": {
                "type": "boolean",
                "description": "True if the invoice is canceled"
              },
              "export-data": {
                "type": "object",
                "description": "Structed invoice head data. Exact content dependent on target invoicing software.",
                "properties": {
                  "generic": {
                    "type": "object",
                    "description": "invoice head data applicable to most target systems",
                    "properties": {
                      "customer-no": {
                        "type": "string",
                        "description": "Customer number or ID"
                      },
                      "customer-name": {
                        "type": "string",
                        "description": "Customer name"
                      },
                      "your-reference": {
                        "type": "string",
                        "description": "Your reference"
                      },
                      "our-reference": {
                        "type": "string",
                        "description": "Our reference"
                      },
                      "address-1": {
                        "type": "string",
                        "description": "Address line 1"
                      },
                      "address-2": {
                        "type": "string",
                        "description": "Address line 2"
                      },
                      "zip-code": {
                        "type": "string",
                        "description": "Address zip code"
                      },
                      "city": {
                        "type": "string",
                        "description": "Address city"
                      },
                      "country": {
                        "type": "string",
                        "description": "Address country"
                      }
                    }
                  }
                }
              }
            },
            "required": [
              "invoice-date",
              "export-data"
            ]
          }
        ]
      },
      "InvoiceExport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "invoice-id": {
                "type": "string",
                "description": "Unique shift ID",
                "format": "ObjectId"
              },
              "target": {
                "type": "string",
                "description": "Target system for export",
                "example": "eAccounting"
              },
              "target-version": {
                "type": "string",
                "description": "Version of target system"
              },
              "target-invoice-id": {
                "type": "string",
                "description": "Invoice ID assigned by target system",
                "example": 42
              },
              "state": {
                "type": "string",
                "description": "State of export",
                "enum": [
                  "pending",
                  "failed",
                  "completed",
                  "download"
                ]
              },
              "error-code": {
                "type": "string",
                "description": "Error code, if state equals \"failed\""
              },
              "error-message": {
                "type": "string",
                "description": "Error message, if state equals \"failed\""
              }
            },
            "required": [
              "invoice-id",
              "target",
              "state"
            ]
          }
        ]
      },
      "InvoiceRow": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "invoice-id": {
                "type": "string",
                "description": "Unique shift ID",
                "format": "ObjectId"
              },
              "weight": {
                "type": "number",
                "description": "Lighter rows float to the top of the invoice, heavier rows sink."
              },
              "sku": {
                "type": "string",
                "description": "SKU (article number)"
              },
              "description": {
                "type": "string",
                "description": "Date when invoice is due for payment"
              },
              "count": {
                "type": "number",
                "description": "Count"
              },
              "unit": {
                "type": "string",
                "description": "Unit of measurement",
                "example": "hours"
              },
              "price": {
                "type": "number",
                "description": "Price per item"
              },
              "currency": {
                "type": "string",
                "description": "Currency in ISO 4217 format, must match invoice head",
                "example": "USD"
              },
              "discount": {
                "type": "number",
                "description": "Discount, in fraction. 0.05 == 5%.",
                "example": 0.05
              },
              "house-work": {
                "type": "boolean",
                "description": "True if the invoice row concerns tax deductible house work",
                "example": false
              },
              "duration": {
                "type": "number",
                "description": "Duration in hours of underlying time report. Used for statistics only.",
                "example": 2.5
              },
              "report-ids": {
                "type": "array",
                "description": "IDs of underlying time reports that generated this row.",
                "items": {
                  "type": "string",
                  "format": "ObjectId",
                  "example": "5bf6d703571d013b348713cb"
                }
              },
              "export-data": {
                "type": "object",
                "description": "Structed invoice row data. Exact content dependent on target invoicing software.",
                "properties": {
                  "generic": {
                    "type": "object",
                    "description": "invoice row data applicable to most target systems",
                    "properties": {
                      "cost-center": {
                        "type": "string",
                        "description": "Cost center for book-keeping this row",
                        "example": 28
                      },
                      "project-code": {
                        "type": "string",
                        "description": "Project code for book-keeping this row",
                        "example": "PL/I"
                      }
                    }
                  }
                }
              }
            },
            "required": [
              "invoice-id",
              "weight",
              "export-data"
            ]
          }
        ]
      },
      "PermissionsObject": {
        "type": "object",
        "properties": {
          "schedule": {
            "type": "string",
            "format": "CombinationID",
            "description": "Tag combination required for being scheduled. See User/combinations."
          },
          "report": {
            "type": "string",
            "format": "CombinationID",
            "description": "Tag combination required for creating independent time reports. See User/combinations."
          }
        }
      },
      "Preference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Setting ID"
          },
          "value": {
            "type": "object",
            "description": "Value can be anything, both primitive types and arrays and objects."
          }
        },
        "required": [
          "id"
        ]
      },
      "Registry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "Localized registry title"
              },
              "description": {
                "type": "string",
                "description": "Human-readable registry description"
              },
              "read-only": {
                "type": "boolean",
                "description": "Mark this registry as read-only, to prevent changes from the front-end"
              }
            },
            "required": [
              "title"
            ]
          }
        ]
      },
      "RegistryData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "Human-readable title"
              },
              "registry-id": {
                "type": "string",
                "format": "ObjectId",
                "description": "Data belongs to this registry"
              },
              "permissions": {
                "$ref": "#/components/schemas/PermissionsObject"
              },
              "values": {
                "type": "object",
                "description": "Values for custom fields"
              }
            },
            "required": [
              "title",
              "registry-id"
            ]
          }
        ]
      },
      "Shift": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "start": {
                "type": "string",
                "format": "local-date-time",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?$",
                "description": "Start of shift without time zone (i.e. 2019-04-30T15:41:00.000)"
              },
              "end": {
                "type": "string",
                "format": "local-date-time",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?$",
                "description": "End of shift without time zone (i.e. 2019-04-30T15:41:00.000)"
              },
              "breaks": {
                "type": "array",
                "description": "List of breaks",
                "items": {
                  "$ref": "#/components/schemas/Break"
                }
              },
              "booked-users": {
                "type": "array",
                "description": "List of booked users",
                "readOnly": true,
                "items": {
                  "type": "string",
                  "format": "ObjectId"
                }
              },
              "booked": {
                "type": "number",
                "readOnly": true,
                "description": "Number of booked users"
              },
              "duplicity": {
                "type": "number",
                "description": "Maximum (and desired) number of booked users"
              },
              "values": {
                "type": "object",
                "description": "Values for custom registry fields"
              },
              "withhold": {
                "type": "boolean",
                "description": "Hide shift from users making it visible for managers only",
                "readOnly": true
              }
            },
            "required": [
              "id",
              "start",
              "end"
            ]
          }
        ]
      },
      "ShiftBookingRequest": {
        "type": "object",
        "properties": {
          "shift-selector": {
            "type": "object",
            "properties": {
              "ids": {
                "type": "array",
                "description": "Shift IDs",
                "items": {
                  "type": "string",
                  "format": "ObjectId"
                }
              },
              "interval": {
                "$ref": "#/components/schemas/DateSelector"
              },
              "rolling-id": {
                "type": "string",
                "format": "ObjectId"
              },
              "rolling-shift-id": {
                "type": "string",
                "format": "ObjectId"
              }
            }
          },
          "not-booked-user-ids": {
            "type": "array",
            "description": "User IDs that should not be booked on these shifts",
            "items": {
              "type": "string",
              "format": "ObjectId"
            }
          },
          "booked-user-ids": {
            "type": "array",
            "description": "User IDs that should be booked on these shift, sorted in the order they should be booked",
            "items": {
              "type": "string",
              "format": "ObjectId"
            }
          },
          "conflict-policy": {
            "type": "string",
            "description": "How to proceed if a user is already booked on an overlapping shift.",
            "enum": [
              "skip",
              "move",
              "double-book"
            ],
            "default": "skip"
          }
        },
        "required": [
          "shift-selector"
        ]
      },
      "ShiftBookingResponse": {
        "type": "object",
        "properties": {
          "updated-shifts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shift"
            }
          },
          "unresolved-conflicts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "user-id": {
                  "type": "string",
                  "format": "ObjectId"
                },
                "requested-shift-id": {
                  "type": "string",
                  "format": "ObjectId"
                },
                "conflict-shift-ids": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "ObjectId"
                  }
                }
              }
            }
          }
        }
      },
      "ShiftPublishRequest": {
        "type": "object",
        "properties": {
          "shift-selector": {
            "type": "object",
            "description": "Shifts matching selector will be ensured to be published.",
            "properties": {
              "ids": {
                "type": "array",
                "description": "Shift IDs",
                "items": {
                  "type": "string",
                  "format": "ObjectId"
                }
              },
              "interval": {
                "$ref": "#/components/schemas/DateSelector"
              },
              "rolling-id": {
                "type": "string",
                "format": "ObjectId"
              },
              "rolling-shift-id": {
                "type": "string",
                "format": "ObjectId"
              }
            }
          }
        }
      },
      "ShiftPublishResponse": {
        "type": "object",
        "properties": {
          "updated-shifts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shift"
            }
          }
        }
      },
      "ShiftUnpublishRequest": {
        "type": "object",
        "properties": {
          "shift-selector": {
            "type": "object",
            "description": "Shifts matching selector will be ensured to be unpublished.",
            "properties": {
              "ids": {
                "type": "array",
                "description": "Shift IDs",
                "items": {
                  "type": "string",
                  "format": "ObjectId"
                }
              },
              "interval": {
                "$ref": "#/components/schemas/DateSelector"
              },
              "rolling-id": {
                "type": "string",
                "format": "ObjectId"
              },
              "rolling-shift-id": {
                "type": "string",
                "format": "ObjectId"
              }
            }
          }
        }
      },
      "Timereport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "start": {
                "type": "string",
                "format": "local-date-time",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?$",
                "description": "Start of time report without time zone (i.e. 2019-04-30T15:41:00.000)"
              },
              "end": {
                "type": "string",
                "format": "local-date-time",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?$",
                "description": "End of time report without time zone (i.e. 2019-04-30T15:41:00.000)"
              },
              "breaks": {
                "type": "array",
                "description": "List of breaks",
                "items": {
                  "$ref": "#/components/schemas/Break"
                }
              },
              "user-id": {
                "type": "string",
                "description": "User ID",
                "format": "ObjectId"
              },
              "shift-id": {
                "type": "string",
                "description": "Reported against shift with this id.",
                "format": "ObjectId"
              },
              "values": {
                "type": "object",
                "description": "Values for custom registry fields"
              }
            },
            "required": [
              "start",
              "end",
              "user-id"
            ]
          }
        ]
      },
      "TokenInfo": {
        "type": "object",
        "properties": {
          "user-id": {
            "type": "string",
            "description": "ID of currently logged in user"
          },
          "role": {
            "type": "string",
            "description": "Role of currently logged in user"
          },
          "permissions": {
            "type": "string",
            "description": "Active set of permissions"
          },
          "modules": {
            "type": "string",
            "description": "Enabled Timezynk modules"
          },
          "company-id": {
            "type": "string",
            "description": "ID of current company"
          },
          "created": {
            "type": "number",
            "description": "Timestamp in milliseconds for when the token was created"
          },
          "expires": {
            "type": "number",
            "description": "Timestamp in milliseconds for when the token will expire"
          },
          "issued-by": {
            "type": "string",
            "description": "ID if issuing server"
          },
          "audience": {
            "type": "string",
            "description": "ID of intended audience for the token"
          }
        }
      },
      "User": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "description": "Unique username used for logging in"
              },
              "role": {
                "type": "string",
                "description": "The role for this user"
              },
              "email": {
                "type": "string",
                "description": "User email address",
                "format": "email"
              },
              "employee-no": {
                "type": "string",
                "description": "User employee number"
              },
              "id-no": {
                "type": "string",
                "description": "Users [National Indentification Number](https://en.wikipedia.org/wiki/National_identification_number)\n"
              },
              "bank-account": {
                "type": "string",
                "description": "Users bank account for salary payments"
              },
              "department": {
                "type": "string",
                "description": "department"
              },
              "company": {
                "type": "string",
                "description": "company for salary export"
              },
              "country-code": {
                "type": "number",
                "description": "country code for mobile number"
              },
              "mobile": {
                "type": "string",
                "description": "mobile number"
              },
              "work-phone": {
                "type": "string",
                "description": "work phone number"
              },
              "home-phone": {
                "type": "string",
                "description": "home phone number"
              },
              "lang": {
                "type": "string",
                "description": "users preferred language (en,sv,da or nb currently supported)"
              },
              "address": {
                "type": "string",
                "description": "users street address"
              },
              "address2": {
                "type": "string",
                "description": "users second address line"
              },
              "zip": {
                "type": "string",
                "description": "users zip code"
              },
              "city": {
                "type": "string",
                "description": "users city"
              },
              "country": {
                "type": "string",
                "description": "users country code"
              },
              "int-mobile": {
                "type": "string",
                "readOnly": true,
                "description": "users full mobile with country code applied"
              },
              "relative-name": {
                "type": "string",
                "description": "name of relative"
              },
              "relative-phone": {
                "type": "string",
                "description": "phone number of relative"
              },
              "notes": {
                "type": "string",
                "description": "notes for this user"
              },
              "start": {
                "type": "string",
                "format": "date",
                "description": "start date for users employment"
              },
              "end": {
                "type": "string",
                "format": "date",
                "description": "end date for users employment"
              },
              "permissions": {
                "type": "array",
                "description": "List of tags",
                "items": {
                  "type": "string"
                }
              },
              "combinations": {
                "type": "array",
                "description": "List of users tag combinations",
                "readOnly": true,
                "items": {
                  "type": "string"
                }
              },
              "values": {
                "type": "object",
                "description": "Values for custom registry fields"
              },
              "last-login": {
                "type": "number",
                "description": "last login timestamp (milliseconds since unix epoch)"
              },
              "last-access": {
                "type": "number",
                "description": "last access timestamp (milliseconds since unix epoch)"
              },
              "first-login": {
                "type": "number",
                "description": "first login timestamp (milliseconds since unix epoch)"
              }
            },
            "required": [
              "username",
              "role",
              "email"
            ]
          }
        ]
      }
    },
    "parameters": {
      "criteriaParam": {
        "in": "query",
        "name": "interval[match]",
        "description": "Define how to match the interval",
        "schema": {
          "type": "string",
          "enum": [
            "intersects",
            "start-in"
          ],
          "default": "start-in"
        }
      },
      "endParam": {
        "in": "query",
        "name": "interval[end]",
        "description": "End of matching interval",
        "required": true,
        "schema": {
          "type": "string",
          "format": "date"
        }
      },
      "startParam": {
        "in": "query",
        "name": "interval[start]",
        "description": "Start of matching interval",
        "required": true,
        "schema": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "requestBodies": {
      "Registry": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Registry"
            }
          }
        },
        "required": true
      },
      "RegistryData": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RegistryData"
            }
          }
        },
        "required": true
      },
      "Timereport": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Timereport"
            }
          }
        },
        "required": true
      }
    },
    "securitySchemes": {
      "TZApiAuth": {
        "type": "oauth2",
        "description": "OAuth2 API authentication",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://api.timezynk.com/api/oauth2/v1/auth",
            "tokenUrl": "https://api.timezynk.com/api/oauth2/v1/token",
            "scopes": {
              "read:company": "Read all company information",
              "write:company": "Write all company information",
              "read:user": "Read all user information",
              "write:user": "Write all user information",
              "write:availability": "Create, update and delete availability for logged in user"
            }
          },
          "clientCredentials": {
            "tokenUrl": "https://api.timezynk.com/api/oauth2/v1/token",
            "scopes": {
              "read:company": "Read all company information",
              "write:company": "Write all company information"
            }
          }
        }
      }
    }
  }
}
