{
  "openapi": "3.0.3",
  "info": {
    "title": "Timezynk API",
    "description": "API for Timezynk scheduling system",
    "version": "2.7.0"
  },
  "security": [
    {
      "TZApiAuth": []
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Endpoints for authentication and configuration"
    },
    {
      "name": "Availability",
      "description": "Fetching and updating availability"
    },
    {
      "name": "Invoice",
      "description": "Fetching, updating and creating invoices"
    },
    {
      "name": "Invoice rows",
      "description": "Fetching, updating and creating invoice rows"
    },
    {
      "name": "Invoice articles",
      "description": "Fetching, updating and creating invoices articles"
    },
    {
      "name": "Invoice export",
      "description": "Fetching and creating invoice exports"
    },
    {
      "name": "User",
      "description": "Calls for fetching and updating the system users."
    },
    {
      "name": "Work hours",
      "description": "Calls for setting up work hours schedules and employment contracts"
    },
    {
      "name": "Shift",
      "description": "Calls for fetching and updating scheduled shifts."
    },
    {
      "name": "Shift Exchanges",
      "description": "Endpoints for exchanging shifts between users."
    },
    {
      "name": "Time Reports",
      "description": "Time reports are the actual worked time as reported by the user."
    },
    {
      "name": "Registry",
      "description": "The registry handles custom data lists and their definitions."
    },
    {
      "name": "Registry Data",
      "description": "Data contained in a registry."
    },
    {
      "name": "Fields",
      "description": "The fields are used to specify the format for a specific registry instance."
    },
    {
      "name": "Salary articles",
      "description": "Fetching, updating and creating salary articles"
    },
    {
      "name": "Settings",
      "description": "Settings are used to store and retreive configuration parameters."
    },
    {
      "name": "RfQs - outgoing",
      "description": "Outgoing RfQs are requests for quotes that are sent to the companys suppliers."
    },
    {
      "name": "RfQs - incoming",
      "description": "Incoming RfQs are requests for quotes that are received from the companys clients."
    },
    {
      "name": "RfQ shifts - outgoing"
    },
    {
      "name": "RfQ shifts - incoming"
    },
    {
      "name": "Quote shifts - outgoing"
    },
    {
      "name": "Quote shifts - incoming"
    },
    {
      "name": "Quote shift responses - outgoing"
    },
    {
      "name": "Quote shift responses - incoming"
    },
    {
      "name": "RfQ Forms"
    },
    {
      "name": "Orders"
    },
    {
      "name": "Order Forms"
    },
    {
      "name": "Order Clients"
    },
    {
      "name": "Order Suppliers"
    },
    {
      "name": "Related Collections",
      "description": "API for fetching multiple collections in a single request."
    },
    {
      "name": "Roles"
    },
    {
      "name": "Internal Message"
    },
    {
      "name": "Payments"
    },
    {
      "name": "Experimental",
      "description": "These APIs are experimental and and may be changed at any time without warning."
    }
  ],
  "servers": [
    {
      "url": "https://api.timezynk.com/api"
    }
  ],
  "paths": {
    "/articles/invoice": {
      "get": {
        "summary": "Fetch invoice articles",
        "tags": [
          "Invoice articles"
        ],
        "responses": {
          "200": {
            "description": "Array of invoice articles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceArticle"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create invoice article",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceArticle"
              }
            }
          },
          "description": "Invoice article to be added",
          "required": true
        },
        "tags": [
          "Invoice articles"
        ],
        "responses": {
          "200": {
            "description": "Newly added invoice article object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceArticle"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/articles/invoice/{articleId}": {
      "get": {
        "summary": "Fetch invoice article",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Invoice articles"
        ],
        "responses": {
          "200": {
            "description": "Invoice article",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceArticle"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update invoice article",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceArticle"
              }
            }
          },
          "description": "Invoice article changes",
          "required": true
        },
        "tags": [
          "Invoice articles"
        ],
        "responses": {
          "200": {
            "description": "Updated invoice article object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceArticle"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/articles/salary": {
      "get": {
        "summary": "Fetch salary articles",
        "tags": [
          "Salary articles"
        ],
        "responses": {
          "200": {
            "description": "Array of salary articles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SalaryArticle"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create salary article",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SalaryArticle"
              }
            }
          },
          "description": "Salary article to be added",
          "required": true
        },
        "tags": [
          "Salary articles"
        ],
        "responses": {
          "200": {
            "description": "Newly added salary article object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalaryArticle"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/articles/salary/{articleId}": {
      "get": {
        "summary": "Fetch salary article",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Salary articles"
        ],
        "responses": {
          "200": {
            "description": "Salary article",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalaryArticle"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update salary article",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SalaryArticle"
              }
            }
          },
          "description": "Salary article changes",
          "required": true
        },
        "tags": [
          "Salary articles"
        ],
        "responses": {
          "200": {
            "description": "Updated salary article object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalaryArticle"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/availabilities": {
      "get": {
        "summary": "Fetch availability",
        "tags": [
          "Availability"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/startParam"
          },
          {
            "$ref": "#/components/parameters/endParam"
          },
          {
            "$ref": "#/components/parameters/criteriaParam"
          },
          {
            "in": "query",
            "name": "user-id",
            "description": "Find availability for the given user id",
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of availabilities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Availability"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create availability",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Availability"
              }
            }
          },
          "description": "Availability to be added",
          "required": true
        },
        "tags": [
          "Availability"
        ],
        "responses": {
          "200": {
            "description": "Newly added availability object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Availability"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/availabilities/{availabilityId}": {
      "get": {
        "summary": "Fetch planned availability",
        "parameters": [
          {
            "name": "availabilityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Availability"
        ],
        "responses": {
          "200": {
            "description": "Availability object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Availability"
                }
              }
            }
          },
          "404": {
            "description": "Availability not found"
          }
        }
      },
      "put": {
        "summary": "Update planned availability",
        "parameters": [
          {
            "name": "availabilityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Availability"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Availability"
        ],
        "responses": {
          "200": {
            "description": "Updated availability object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Availability"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          },
          "404": {
            "description": "Availability not found"
          }
        }
      },
      "delete": {
        "summary": "Delete planned availability",
        "parameters": [
          {
            "name": "availabilityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Availability"
        ],
        "responses": {
          "200": {
            "description": "Delete successful"
          }
        }
      }
    },
    "/booked-shifts": {
      "put": {
        "summary": "Book and unbook users on shifts",
        "tags": [
          "Shift"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShiftBookingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Bookings completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftBookingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/bulk/articles/invoice": {
      "post": {
        "summary": "Create multiple invoice articles",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvoiceArticle"
                }
              }
            }
          },
          "description": "Invoice articles to be added",
          "required": true
        },
        "tags": [
          "Invoice articles"
        ],
        "responses": {
          "200": {
            "description": "Newly added invoice article objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceArticle"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/bulk/articles/salary": {
      "post": {
        "summary": "Create multiple salary articles",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SalaryArticle"
                }
              }
            }
          },
          "description": "Salary articles to be added",
          "required": true
        },
        "tags": [
          "Salary articles"
        ],
        "responses": {
          "200": {
            "description": "Newly added salary article objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SalaryArticle"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/bulk/invoice-rows": {
      "post": {
        "summary": "Create multiple invoice rows",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvoiceRow"
                }
              }
            }
          },
          "description": "Invoice rows to be added.",
          "required": true
        },
        "tags": [
          "Invoice rows"
        ],
        "responses": {
          "200": {
            "description": "Newly added invoice rows.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceRow"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation failed."
          }
        }
      },
      "delete": {
        "summary": "Delete multiple invoice rows",
        "parameters": [
          {
            "name": "invoice-id",
            "in": "query",
            "required": true,
            "description": "Invoice ID to delete rows for.",
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Invoice rows"
        ],
        "responses": {
          "200": {
            "description": "Delete successful."
          }
        }
      }
    },
    "/bulk/shift-relations": {
      "put": {
        "summary": "Update relations for a list of shifts",
        "description": "Given a list of shift ids, update the relations field according to\nthe set fields in the request body.\n",
        "tags": [
          "Shift"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "shift-ids": {
                    "description": "Can be empty, resulting in no changes.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "ObjectId"
                    },
                    "example": [
                      "5dde7024eded8872705aabcd",
                      "5dde7024eded8872705aabce"
                    ]
                  },
                  "outgoing-rfq-id": {
                    "type": "string",
                    "format": "ObjectId",
                    "nullable": true,
                    "example": "5dde7024eded8872705aabcf"
                  },
                  "incoming-rfq-id": {
                    "type": "string",
                    "format": "ObjectId",
                    "nullable": true,
                    "example": "5dde7024eded8872705aabd0"
                  },
                  "rfq-quote-shift-response-id": {
                    "type": "string",
                    "format": "ObjectId",
                    "nullable": true,
                    "example": "5dde7024eded8872705aabd1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Number of matched shifts.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "match": {
                      "type": "integer",
                      "example": 2
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/default-account/v1/initialize-company": {
      "post": {
        "summary": "Initialize company",
        "description": "Initialize default account for the company\n",
        "tags": [
          "Sign up"
        ],
        "requestBody": {
          "description": "Default account setup.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Data of the default account setup form for initializing a new company.",
                "properties": {
                  "registry-template-id": {
                    "type": "string"
                  },
                  "salary-integration-id": {
                    "type": "string"
                  },
                  "invoice-integration-id": {
                    "type": "string"
                  }
                },
                "required": [
                  "registry-template-id",
                  "salary-integration-id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Default account has been successfully initialized"
          }
        }
      }
    },
    "/default-account/v1/invoice-integrations": {
      "get": {
        "summary": "Invoice integrations",
        "description": "Get possible integrations options for default setup\n",
        "tags": [
          "Sign up"
        ],
        "responses": {
          "200": {
            "description": "An array of integration modules",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IntegrationModule"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/default-account/v1/registries-templates": {
      "get": {
        "summary": "Registries templates",
        "description": "Get registries templates for default account\n",
        "tags": [
          "Sign up"
        ],
        "responses": {
          "200": {
            "description": "An array of registries templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RegistryTemplate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/default-account/v1/salary-integrations": {
      "get": {
        "summary": "Salary integrations",
        "description": "Get possible integrations options for default setup\n",
        "tags": [
          "Sign up"
        ],
        "responses": {
          "200": {
            "description": "An array of integration modules",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IntegrationModule"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/discount-codes/v1/discount-codes": {
      "get": {
        "summary": "Index discount codes",
        "description": "The discount codes endpoint returns a list of all available discount codes for the current company.\n",
        "tags": [
          "Discount codes"
        ],
        "responses": {
          "200": {
            "description": "An array of discount codes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DiscountCodes"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create discount codes",
        "description": "Create discount code\n",
        "requestBody": {
          "description": "Discount code entry to be created.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscountCodes"
              }
            }
          }
        },
        "tags": [
          "Discount codes"
        ],
        "responses": {
          "200": {
            "description": "Single discount code entry",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DiscountCodes"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/discounts": {
      "get": {
        "summary": "Index discounts",
        "description": "The Discounts endpoint returns a list of all discounts used by the current company.\n",
        "tags": [
          "Subscriptions"
        ],
        "responses": {
          "200": {
            "description": "An array of discounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Discounts"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/domain-log/v1": {
      "get": {
        "summary": "Fetch changes",
        "tags": [
          "Experimental"
        ],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "required": true,
            "description": "Oldest timestamp to fetch changes for",
            "schema": {
              "type": "number",
              "format": "timestamp"
            }
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "description": "Newest timestamp to fetch changes for",
            "schema": {
              "type": "number",
              "format": "timestamp"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Type of changes to fetch",
            "schema": {
              "type": "string",
              "enum": [
                "create",
                "update",
                "delete"
              ]
            }
          },
          {
            "name": "user-id",
            "in": "query",
            "required": false,
            "description": "Fetch changes done by a specific user",
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of changes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogItem"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/experimental/blocked-inquiries": {
      "get": {
        "summary": "Find blocked inquiries",
        "description": "Find open inquiries that are blocked by overlapping or adjacent shifts.",
        "tags": [
          "Experimental"
        ],
        "responses": {
          "200": {
            "description": "List blocked inquiries with blocking info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "ObjectId",
                        "description": "Inquiry ID"
                      },
                      "shift-id": {
                        "type": "string",
                        "format": "ObjectId"
                      },
                      "user-id": {
                        "type": "string",
                        "format": "ObjectId"
                      },
                      "duplicity": {
                        "type": "number",
                        "description": "Maximum (and desired) number of booked users"
                      },
                      "booked-users": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "format": "ObjectId"
                        }
                      },
                      "overlapping-shift-ids": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "format": "ObjectId"
                        }
                      },
                      "adjacent-shift-ids": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "format": "ObjectId"
                        }
                      },
                      "overlapping-availability": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "ObjectId"
                            },
                            "available": {
                              "type": "boolean",
                              "description": "True if user is available, false if not available."
                            },
                            "start": {
                              "type": "string",
                              "format": "local-date-time",
                              "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?$",
                              "description": "Start of shift without time zone (i.e. 2019-04-30T15:41:00.000)"
                            },
                            "end": {
                              "type": "string",
                              "format": "local-date-time",
                              "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?$",
                              "description": "End of shift without time zone (i.e. 2019-04-30T15:41:00.000)"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No blocked inquiries found"
          }
        }
      }
    },
    "/fields": {
      "get": {
        "summary": "Index available registry field types",
        "tags": [
          "Fields"
        ],
        "responses": {
          "200": {
            "description": "A list of all valid registry field types. One of these must be the basis for creating a new custom registry field.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/files/{fileId}": {
      "get": {
        "summary": "Get file export state",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "File export"
        ],
        "responses": {
          "200": {
            "description": "File metadata and handle",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "File id",
                      "format": "ObjectId"
                    },
                    "filename": {
                      "type": "string",
                      "description": "File name"
                    },
                    "content-type": {
                      "type": "string",
                      "description": "Content type"
                    },
                    "entity": {
                      "type": "string",
                      "description": "File category or type",
                      "example": "Invoice export"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authorized to read file"
          },
          "404": {
            "description": "File is not ready yet or has not been created"
          }
        }
      }
    },
    "/files/{fileId}/done": {
      "post": {
        "summary": "Mark file as done and start conversion to Excel",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExcelExportDone"
              }
            }
          },
          "description": "File properties",
          "required": true
        },
        "tags": [
          "File export"
        ],
        "responses": {
          "200": {
            "description": "File metadata and handle",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "File id",
                      "format": "ObjectId"
                    },
                    "state": {
                      "type": "string",
                      "description": "File state",
                      "enum": [
                        "processing"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/files/{fileId}/download": {
      "get": {
        "summary": "Download file as stream",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "File export"
        ],
        "responses": {
          "200": {
            "description": "File contents",
            "content": {
              "application/vnd.ms-excel": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized to read file"
          },
          "404": {
            "description": "File is not ready yet or has not been created"
          }
        }
      }
    },
    "/files/{fileId}/sheets": {
      "post": {
        "summary": "Add sheet to Excel file",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExcelSheet"
              }
            }
          },
          "description": "Excel sheet",
          "required": true
        },
        "tags": [
          "File export"
        ],
        "responses": {
          "200": {
            "description": "File metadata and handle",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "File id",
                      "format": "ObjectId"
                    },
                    "rows-added": {
                      "type": "number",
                      "description": "Number of added rows from sheet"
                    },
                    "state": {
                      "type": "string",
                      "description": "File state",
                      "enum": [
                        "pending"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/files/export/excel": {
      "post": {
        "summary": "Create new Excel file",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExcelExport"
              }
            }
          },
          "description": "File properties",
          "required": true
        },
        "tags": [
          "File export"
        ],
        "responses": {
          "200": {
            "description": "File metadata and handle",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "File id",
                      "format": "ObjectId"
                    },
                    "filename": {
                      "type": "string",
                      "description": "File name"
                    },
                    "state": {
                      "type": "string",
                      "description": "File state",
                      "enum": [
                        "pending",
                        "processing"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/house-work-categories": {
      "get": {
        "summary": "Fetch house work categories for invoice articles",
        "tags": [
          "Invoice articles"
        ],
        "responses": {
          "200": {
            "description": "Array of house work categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HouseWorkCategory"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/internal-message": {
      "get": {
        "summary": "Fetch internal messages",
        "description": "Fetch all internal messages according to provided query.",
        "tags": [
          "Internal Message"
        ],
        "responses": {
          "200": {
            "description": "Array of messages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InternalMessage"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create internal message",
        "description": "Add a new internal message.",
        "tags": [
          "Internal Message"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InternalMessage"
              }
            }
          },
          "description": "The message object.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Newly added internal message.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalMessage"
                }
              }
            }
          }
        }
      }
    },
    "/internal-message/{internalMessageId}": {
      "get": {
        "summary": "Get internal message",
        "description": "Get an internal message according to provided id.",
        "parameters": [
          {
            "name": "internalMessageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Internal Message"
        ],
        "responses": {
          "200": {
            "description": "The message.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalMessage"
                }
              }
            }
          },
          "404": {
            "description": "Message not found."
          }
        }
      },
      "delete": {
        "summary": "Delete internal message",
        "description": "Delete existing internal message.",
        "parameters": [
          {
            "name": "internalMessageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Internal Message"
        ],
        "responses": {
          "200": {
            "description": "Delete successful."
          },
          "404": {
            "description": "Message not found."
          }
        }
      }
    },
    "/invoice-download": {
      "post": {
        "summary": "Prepare invoices for download",
        "requestBody": {
          "description": "Invoices to download must be posted with export type.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "description": "Array of invoices to download.",
                    "items": {
                      "type": "string",
                      "format": "ObjectId"
                    },
                    "example": [
                      "5f31459ddaf86a3cd67543bf",
                      "5f31459ddaf86a3cd67543c1"
                    ]
                  },
                  "target": {
                    "type": "string",
                    "enum": [
                      "excel",
                      "raindance",
                      "ekot",
                      "ubw"
                    ],
                    "description": "Export format.",
                    "example": "ubw"
                  }
                },
                "required": [
                  "ids",
                  "target"
                ]
              }
            }
          }
        },
        "tags": [
          "Invoice export"
        ],
        "responses": {
          "200": {
            "description": "Invoice download object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "ObjectId",
                      "description": "The download Id.",
                      "example": "5f31459ddaf86a3cd67543c9"
                    },
                    "vid": {
                      "type": "string",
                      "format": "ObjectId",
                      "example": "5f31459ddaf86a3cd67543ca"
                    },
                    "valid-from": {
                      "type": "number",
                      "format": "Timestamp",
                      "example": 1597064605190
                    },
                    "ids": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "ObjectId"
                      },
                      "example": [
                        "5f31459ddaf86a3cd67543bf",
                        "5f31459ddaf86a3cd67543c1"
                      ]
                    },
                    "created": {
                      "type": "number",
                      "format": "Timestamp",
                      "example": 1597064605000
                    },
                    "company-id": {
                      "type": "string",
                      "format": "ObjectId",
                      "example": "5f313fb5daf86a3cd6754369"
                    },
                    "created-by": {
                      "type": "string",
                      "format": "ObjectId",
                      "example": "5f313fb5daf86a3cd675436a"
                    },
                    "target": {
                      "type": "string",
                      "example": "ubw"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation failed."
          }
        }
      }
    },
    "/invoice-download/{downloadId}": {
      "get": {
        "summary": "Download invoices",
        "tags": [
          "Invoice export"
        ],
        "parameters": [
          {
            "name": "downloadId",
            "in": "path",
            "description": "Id of the prepared download.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of invoices.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "String in the desired export format."
                  }
                },
                "example": [
                  "\tMagnus\t\t\t\t1\t3008\tOurReference\t\tTesttext1\tDAG\t ..."
                ]
              }
            }
          },
          "404": {
            "description": "Download not found."
          }
        }
      }
    },
    "/invoices-export": {
      "get": {
        "summary": "Fetch invoice exports",
        "tags": [
          "Invoice export"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "query",
            "description": "Target to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "State to search for.",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "failed",
                "completed",
                "download"
              ]
            }
          },
          {
            "name": "invoice-id",
            "in": "query",
            "description": "Invoice ID to search for.",
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of invoice exports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceExport"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create single invoice export",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceExport"
              }
            }
          },
          "description": "Invoice to be added.",
          "required": true
        },
        "tags": [
          "Invoice export"
        ],
        "responses": {
          "200": {
            "description": "Newly added invoice export.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceExport"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed."
          }
        }
      }
    },
    "/invoices-rows": {
      "get": {
        "summary": "Fetch invoice rows",
        "tags": [
          "Invoice rows"
        ],
        "parameters": [
          {
            "name": "invoice-id",
            "in": "query",
            "required": true,
            "description": "Invoice to fetch the rows for.",
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of invoice rows",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceRow"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create single invoice row",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceRow"
              }
            }
          },
          "description": "Invoice to be added.",
          "required": true
        },
        "tags": [
          "Invoice rows"
        ],
        "responses": {
          "200": {
            "description": "Newly added invoice row.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceRow"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed."
          }
        }
      }
    },
    "/invoices-rows/{rowId}": {
      "get": {
        "summary": "Fetch invoice row",
        "parameters": [
          {
            "name": "rowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Invoice rows"
        ],
        "responses": {
          "200": {
            "description": "Invoice object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceRow"
                }
              }
            }
          },
          "404": {
            "description": "Invoice not found."
          }
        }
      },
      "put": {
        "summary": "Update invoice row",
        "parameters": [
          {
            "name": "rowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceRow"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Invoice rows"
        ],
        "responses": {
          "200": {
            "description": "Updated invoice row object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceRow"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed."
          },
          "404": {
            "description": "Invoice not found."
          }
        }
      },
      "delete": {
        "summary": "Delete invoice row",
        "parameters": [
          {
            "name": "rowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Invoice rows"
        ],
        "responses": {
          "200": {
            "description": "Delete successful."
          },
          "404": {
            "description": "Invoice not found."
          }
        }
      }
    },
    "/invoices": {
      "get": {
        "summary": "Fetch invoices",
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Array of invoices",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invoice"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create invoices",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Invoice"
              }
            }
          },
          "description": "Invoice to be added",
          "required": true
        },
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Newly added invoice object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed."
          }
        }
      }
    },
    "/invoices/{invoiceId}": {
      "get": {
        "summary": "Fetch invoice",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Invoice object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "404": {
            "description": "Invoice not found"
          }
        }
      },
      "put": {
        "summary": "Update invoice",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Invoice"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Updated invoice object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          },
          "404": {
            "description": "Invoice not found"
          }
        }
      },
      "delete": {
        "summary": "Delete invoice",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Delete successful"
          }
        }
      }
    },
    "/invoices/pending/{target}": {
      "get": {
        "summary": "Fetch pending invoices",
        "description": "For given target, fetch all invoices whose latest linked invoice exports are pending.\n",
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Array of invoices",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invoice"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/level-entries": {
      "get": {
        "summary": "Fetch level entries",
        "parameters": [
          {
            "in": "query",
            "name": "user-id",
            "description": "Filter to only one user",
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Work hours"
        ],
        "responses": {
          "200": {
            "description": "Array of shifts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LevelEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create level entry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LevelEntry"
              }
            }
          },
          "description": "Invoice to be added",
          "required": true
        },
        "tags": [
          "Work hours"
        ],
        "responses": {
          "200": {
            "description": "Newly added level entry object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LevelEntry"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/level-entries/{levelEntryId}": {
      "get": {
        "summary": "Fetch level entry",
        "parameters": [
          {
            "name": "levelEntryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Work hours"
        ],
        "responses": {
          "200": {
            "description": "Level entry object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LevelEntry"
                }
              }
            }
          },
          "404": {
            "description": "Level entry not found"
          }
        }
      },
      "put": {
        "summary": "Update level entry",
        "parameters": [
          {
            "name": "levelEntryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LevelEntry"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Work hours"
        ],
        "responses": {
          "200": {
            "description": "Updated level entry object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LevelEntry"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          },
          "404": {
            "description": "Level entry not found"
          }
        }
      },
      "delete": {
        "summary": "Delete level entry",
        "parameters": [
          {
            "name": "levelEntryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Work hours"
        ],
        "responses": {
          "200": {
            "description": "Delete successful"
          }
        }
      }
    },
    "/oauth2/v1/tokeninfo": {
      "get": {
        "summary": "Token info",
        "description": "Decode your authentication token and check current roles and user.",
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Authentication token information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenInfo"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/oauth2/v1/userinfo": {
      "get": {
        "summary": "User info",
        "description": "OpenID Connect User Info endpoint. Returns decoded standardized claims.",
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "User claims",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/open-shifts": {
      "get": {
        "summary": "Fetch open shifts",
        "description": "Fetch all shifts that are open for booking.",
        "tags": [
          "Shift"
        ],
        "responses": {
          "200": {
            "description": "Array of shifts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shift"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/open-shifts/{shiftId}": {
      "get": {
        "summary": "Fetch open shift",
        "description": "Fetch a single shift that is open for booking.",
        "parameters": [
          {
            "name": "shiftId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Shift"
        ],
        "responses": {
          "200": {
            "description": "Shift object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shift"
                }
              }
            }
          },
          "404": {
            "description": "Shift not found"
          }
        }
      }
    },
    "/orders/v2/booked-users": {
      "get": {
        "summary": "Externally booked users by interval",
        "description": "Endpoint for fetching externally booked users for a specific interval",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "name": "from",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-01-01T10:00:00.000Z",
              "description": "Start of interval"
            }
          },
          {
            "name": "to",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-01-08T10:00:00.000Z",
              "description": "End of interval"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of booked users in interval",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "ObjectId",
                      "description": "Id of the user",
                      "example": "60defbbe5f3eee7be0a12413"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the user",
                      "example": "Kevin Malone"
                    }
                  },
                  "example": [
                    {
                      "id": "60defc172bddad389b645c2f",
                      "name": "Darryl Philbin"
                    },
                    {
                      "id": "60defc33637d0d644e869a7d",
                      "name": "Holly Flax"
                    },
                    {
                      "id": "60defc4fb32cb4dcb5276269",
                      "name": "Jan Levinson Gould"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Order/Shift not found"
          }
        }
      }
    },
    "/orders/v2/client-forms": {
      "get": {
        "summary": "[Client] Fetch forms\n",
        "description": "Endpoint for fetching order forms for a client.",
        "tags": [
          "Order Forms"
        ],
        "responses": {
          "200": {
            "description": "Single order client form item",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderForm"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Order client not found"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/v2/client-forms/{orderFormId}": {
      "get": {
        "summary": "[Client] Fetch single form\n",
        "description": "Endpoint for fetching a signel order form for a client.",
        "tags": [
          "Order Forms"
        ],
        "parameters": [
          {
            "name": "orderFormId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of order client forms",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderForm"
                }
              }
            }
          },
          "404": {
            "description": "Order client not found"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/v2/clients": {
      "get": {
        "summary": "List order clients",
        "description": "The Order Clients endpoint returns a list of all invited and active order clients.\n",
        "tags": [
          "Order Clients"
        ],
        "responses": {
          "200": {
            "description": "An array of order clients",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderClient"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create order clients",
        "description": "Endpoint for creating an order client. When the order client is created, an email invitation will be sent to the entered email.\n",
        "tags": [
          "Order Clients"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderClient"
              }
            }
          },
          "description": "Order client to be created.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "An array of order clients",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderClient"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/v2/clients/{orderClientId}": {
      "get": {
        "summary": "Fetch single order client",
        "description": "Endpoint for fetching a single order client",
        "tags": [
          "Order Clients"
        ],
        "parameters": [
          {
            "name": "orderClientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Single order client",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderClient"
                }
              }
            }
          },
          "404": {
            "description": "Order client not found"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/v2/clients/{orderClientId}/send-invite": {
      "post": {
        "summary": "Send invite email",
        "description": "Endpoint for sending an invitation email to a created order client.",
        "tags": [
          "Order Clients"
        ],
        "parameters": [
          {
            "name": "orderClientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of order client forms",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderForm"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/v2/clients/confirm/{clientCode}": {
      "put": {
        "summary": "Confirm client",
        "description": "The Confirm Client endpoint allows a user to confirm a supplier invitation from a client.\n",
        "tags": [
          "Order Clients"
        ],
        "parameters": [
          {
            "name": "clientCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "description": "Company Id of Client.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "company-id": {
                    "type": "string",
                    "description": "Id of the company for the client.",
                    "format": "ObjectId"
                  }
                },
                "required": [
                  "company-id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "* Client could not be added\n* Client already added\n"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/v2/forms": {
      "get": {
        "summary": "List order forms",
        "description": "The Order Forms endpoint returns a list of all created order forms.\n",
        "tags": [
          "Order Forms"
        ],
        "responses": {
          "200": {
            "description": "An array of order forms",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderForm"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create order form",
        "description": "Endpoint for creating a new form.\n",
        "requestBody": {
          "description": "Order form to be created.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrderForm"
                  }
                ]
              }
            }
          }
        },
        "tags": [
          "Order Forms"
        ],
        "responses": {
          "200": {
            "description": "Newly added form",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderForm"
                }
              }
            }
          }
        }
      }
    },
    "/orders/v2/forms/{orderFormId}": {
      "get": {
        "summary": "Fetch single order form",
        "description": "Endpoint for fetching a single order form",
        "tags": [
          "Order Forms"
        ],
        "parameters": [
          {
            "name": "orderFormId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Single order form",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderForm"
                }
              }
            }
          },
          "404": {
            "description": "Order form not found"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/v2/invitation-code/{code}/validate": {
      "get": {
        "summary": "Validate code",
        "description": "Check if a client/supplier code exists for an order client/supplier.\n",
        "tags": [
          "Orders"
        ],
        "responses": {
          "204": {
            "description": "An entity with this code exists."
          },
          "404": {
            "description": "No entity found."
          }
        }
      }
    },
    "/orders/v2/orders": {
      "get": {
        "summary": "Index orders",
        "description": "The Orders endpoint returns an array of all created orders.\n",
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "An array of orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create order",
        "description": "Endpoint for creating a new order\n\nTo create an order you first need to fetch an Order Form. You should then use `id`, `vid`, `supplier-id`, and `fields` to build your Order object.\n",
        "requestBody": {
          "description": "Order object to be created.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Order"
                  },
                  {
                    "properties": {
                      "shifts": {
                        "type": "array",
                        "description": "List of shifts to be created for this order.",
                        "items": {
                          "$ref": "#/components/schemas/Shift"
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "Newly added order object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/orders/v2/orders/{orderId}": {
      "get": {
        "summary": "Fetch single order",
        "description": "Endpoint for fetching a single user",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single order object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/orders/v2/orders/{orderId}/{status}": {
      "put": {
        "summary": "Update order status",
        "description": "Endpoint for updating a single order's status.",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          },
          {
            "name": "status",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "new",
                "seen",
                "accepted",
                "approved",
                "client-approved",
                "done",
                "rejected"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single order object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/orders/v2/orders/incoming": {
      "get": {
        "summary": "Index incoming orders",
        "description": "The Orders endpoint returns an array of all incoming orders.\n",
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "An array of orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/v2/orders/outgoing": {
      "get": {
        "summary": "Index outgoing orders",
        "description": "The Orders endpoint returns an array of all outoing orders.\n",
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "An array of orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/v2/shifts/{shiftId}/booked-users": {
      "get": {
        "summary": "Externally booked users by shift",
        "description": "Endpoint for fetching externally booked users for a specific shift",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "name": "shiftId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId",
              "example": "60defbca60f6dea92ca82caa",
              "description": "Id of the shift"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of booked users for the specified shift",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "ObjectId",
                      "description": "Id of the user",
                      "example": "60defbbe5f3eee7be0a12413"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the user",
                      "example": "Kevin Malone"
                    }
                  },
                  "example": [
                    {
                      "id": "60defc172bddad389b645c2f",
                      "name": "David Wallace"
                    },
                    {
                      "id": "60defc33637d0d644e869a7d",
                      "name": "Nellie Bertram"
                    },
                    {
                      "id": "60defc4fb32cb4dcb5276269",
                      "name": "Mose"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/orders/v2/suppliers": {
      "get": {
        "summary": "List available suppliers",
        "description": "The Order Suppliers endpoint returns a list of all available to place orders from.\n",
        "tags": [
          "Order Suppliers"
        ],
        "responses": {
          "200": {
            "description": "An array of order suppliers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderSupplier"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create order suppliers",
        "description": "Endpoint for creating an order supplier. When the order supplier is created, an email invitation will be sent to the entered email.\n",
        "tags": [
          "Order Suppliers"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderSupplier"
              }
            }
          },
          "description": "Order supplier to be created.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "An array of order suppliers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderSupplier"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/v2/suppliers/{orderSupplierId}": {
      "get": {
        "summary": "Fetch single order supplier",
        "description": "Endpoint for fetching a single order supplier",
        "tags": [
          "Order Suppliers"
        ],
        "parameters": [
          {
            "name": "orderSupplierId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Single order supplier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderSupplier"
                }
              }
            }
          },
          "404": {
            "description": "Order supplier not found"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/v2/suppliers/{orderSupplierId}/send-invite": {
      "post": {
        "summary": "Send invite email",
        "description": "Endpoint for sending an invitation email to a created order supplier.",
        "tags": [
          "Order Suppliers"
        ],
        "parameters": [
          {
            "name": "orderSupplierId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of order supplier forms",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderForm"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/v2/suppliers/confirm/{supplierCode}": {
      "put": {
        "summary": "Confirm supplier",
        "description": "The Confirm Supplier endpoint allows a user to confirm a client invitation from a supplier.\n",
        "tags": [
          "Order Suppliers"
        ],
        "parameters": [
          {
            "name": "supplierCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "description": "Company Id of Supplier.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "company-id": {
                    "type": "string",
                    "description": "Id of the company for the supplier.",
                    "format": "ObjectId"
                  }
                },
                "required": [
                  "company-id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "* Supplier could not be added\n* Supplier already added\n"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payments/v1/adyen/deletePaymentMethod": {
      "post": {
        "summary": "Delete payment method",
        "description": "A proxy endpoint for deleting an Adyen stored payment method, proxied through to [POST /Recurring/v49/disable](https://docs.adyen.com/api-explorer/#/Recurring/v49/post/disable).\n\nFor more information about how to use the endpoint see the Adyen docs:  \n- [Adyen Tokenization](https://docs.adyen.com/online-payments/tokenization/managing-tokens)  \n- [POST /Recurring/v49/disable](https://docs.adyen.com/api-explorer/#/Recurring/v49/post/disable)\n",
        "requestBody": {
          "description": "Payment details.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Adyen stored payment method id / recurringDetailReference",
                    "example": "841631886584433E"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Payments"
        ],
        "responses": {
          "200": {
            "description": "Adyen delete payment method response. Responds with payload provided by the adyen API.\n",
            "content": {
              "application/json": {
                "example": {
                  "response": "[detail-successfully-disabled]"
                }
              }
            }
          }
        }
      }
    },
    "/payments/v1/adyen/getPaymentMethods": {
      "get": {
        "summary": "Adyen payment methods",
        "description": "A proxy endpoint for indexing available Adyen payment methods. This endpoint should be used for rendering the Adyen [pre-built UI option: Drop-in](https://docs.adyen.com/online-payments/drop-in-web) component.\n\nFor more information about how to use the endpoint see the Adyen docs:  \n- [Drop-in UI docs](https://docs.adyen.com/online-payments/drop-in-web/tutorial-node-js#build-the-client)\n- [POST /paymentMethods endpoint](https://docs.adyen.com/api-explorer/#/CheckoutService/v67/post/paymentMethods)\n",
        "tags": [
          "Payments"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "countryCode",
            "description": "Country code of the caller. [More info](https://docs.adyen.com/online-payments/3d-secure/native-3ds2/web-drop-in#show-the-available-cards-in-your-payment-form).",
            "schema": {
              "type": "string",
              "example": "se"
            }
          },
          {
            "in": "query",
            "name": "currency",
            "description": "Currency of the caller. [More info](https://docs.adyen.com/online-payments/3d-secure/native-3ds2/web-drop-in#show-the-available-cards-in-your-payment-form).",
            "schema": {
              "type": "string",
              "example": "SEK"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all the available payment methods Timezynk accepts.",
            "content": {
              "application/json": {
                "example": {
                  "paymentMethods": [
                    {
                      "brands": [
                        "amex",
                        "bcmc",
                        "cup",
                        "diners",
                        "discover",
                        "jcb",
                        "maestro",
                        "mc",
                        "visa"
                      ],
                      "details": [
                        {
                          "key": "number",
                          "type": "text"
                        },
                        {
                          "key": "expiryMonth",
                          "type": "text"
                        },
                        {
                          "key": "expiryYear",
                          "type": "text"
                        },
                        {
                          "key": "cvc",
                          "type": "text"
                        },
                        {
                          "key": "holderName",
                          "optional": true,
                          "type": "text"
                        }
                      ],
                      "name": "Credit Card",
                      "type": "scheme"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/payments/v1/adyen/handleShopperRedirect": {
      "get": {
        "summary": "Shopper redirect",
        "description": "Endpoint for handling an Adyen shopper redirects. Sends payment details during a page redirect and determines the outcome for the shopper. Used for all payment methods that require a redirect\n\nFor more information about how to use the endpoint see the Adyen docs:  \n- [Drop-in UI docs](https://docs.adyen.com/online-payments/drop-in-web/tutorial-node-js#build-the-client)\n- [POST /payment/defails endpoint](https://docs.adyen.com/api-explorer/#/CheckoutService/v67/post/payments/details)\n",
        "parameters": [
          {
            "name": "redirectResult",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "redirectResult field definition in [Adyen docs description](https://docs.adyen.com/api-explorer/#/CheckoutService/v67/post/payments/details__reqParam_details-redirectResult)."
            }
          },
          {
            "name": "MD",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "MD field definition in [Adyen docs description](https://docs.adyen.com/api-explorer/#/CheckoutService/v67/post/payments/details__reqParam_details-MD)."
            }
          },
          {
            "name": "PaRes",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "PaRes field definition in [Adyen docs description](https://docs.adyen.com/api-explorer/#/CheckoutService/v67/post/payments/details__reqParam_details-PaRes)."
            }
          }
        ],
        "tags": [
          "Payments"
        ],
        "responses": {
          "301": {
            "description": "Visit Adyen [POST /payments/details](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments/details) for details"
          }
        }
      },
      "post": {
        "summary": "Shopper redirect",
        "description": "Endpoint for handling an Adyen shopper redirects. Sends payment details during a page redirect and determines the outcome for the shopper. Used for all payment methods that require a redirect\n\nFor more information about how to use the endpoint see the Adyen docs:  \n- [Drop-in UI docs](https://docs.adyen.com/online-payments/drop-in-web/tutorial-node-js#build-the-client)\n- [POST /payment/defails endpoint](https://docs.adyen.com/api-explorer/#/CheckoutService/v67/post/payments/details)\n",
        "requestBody": {
          "description": "Payment details.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "redirectResult": {
                    "type": "string",
                    "description": "redirectResult field definition in [Adyen docs description](https://docs.adyen.com/api-explorer/#/CheckoutService/v67/post/payments/details__reqParam_details-redirectResult)."
                  },
                  "MD": {
                    "type": "string",
                    "description": "MD field definition in [Adyen docs description](https://docs.adyen.com/api-explorer/#/CheckoutService/v67/post/payments/details__reqParam_details-MD)."
                  },
                  "PaRes": {
                    "type": "string",
                    "description": "PaRes field definition in [Adyen docs description](https://docs.adyen.com/api-explorer/#/CheckoutService/v67/post/payments/details__reqParam_details-PaRes)."
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Payments"
        ],
        "responses": {
          "301": {
            "description": "Visit Adyen [POST /payments/details](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments/details) for details"
          }
        }
      }
    },
    "/payments/v1/adyen/initiatePayment": {
      "post": {
        "summary": "Initiate payment",
        "description": "A proxy endpoint for initiating an Adyen payment, proxied through to [POST /initiatePayment endpoint](https://docs.adyen.com/api-explorer/#/CheckoutService/67/post/payments). The endpoint should be used to initiate a payment via the Adyen [pre-built UI option: Drop-in](https://docs.adyen.com/online-payments/drop-in-web) component.\n\nFor more information about how to use the endpoint see the Adyen docs:  \n- [Drop-in UI docs](https://docs.adyen.com/online-payments/drop-in-web/tutorial-node-js#build-the-client)  \n- [POST /initiatePayment endpoint](https://docs.adyen.com/api-explorer/#/CheckoutService/67/post/payments)\n",
        "requestBody": {
          "description": "Payment details.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AdyenInitiatePaymentRequest"
                  }
                ]
              }
            }
          }
        },
        "tags": [
          "Payments"
        ],
        "responses": {
          "200": {
            "description": "Adyen initiate payment response",
            "content": {
              "application/json": {
                "example": {
                  "resultCode": "RedirectShopper",
                  "action": {
                    "data": {
                      "MD": "OEVudmZVMUlkWjd0MDNwUWs2bmhSdz09...",
                      "PaReq": "eNpVUttygjAQ/RXbDyAXBYRZ00HpTH3wUosPfe...",
                      "TermUrl": "https://example.com/checkout?shopperOrder=12xy.."
                    },
                    "method": "POST",
                    "paymentData": "Ab02b4c0!BQABAgCJN1wRZuGJmq8dMncmypvknj9s7l5Tj...",
                    "paymentMethodType": "scheme",
                    "type": "redirect",
                    "url": "https://test.adyen.com/hpp/3d/validate.shtml"
                  },
                  "details": [
                    {
                      "key": "MD",
                      "type": "text"
                    },
                    {
                      "key": "PaRes",
                      "type": "text"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/payments/v1/adyen/submitAdditionalDetails": {
      "post": {
        "summary": "Shopper redirect",
        "description": "A proxy endpoint for submitting additional details, if requested by payment provider.\n\nFor more information about how to use the endpoint see the Adyen docs:  \n- [Drop-in UI docs](https://docs.adyen.com/online-payments/drop-in-web/tutorial-node-js#additional-details)\n- [POST /payment/defails endpoint](https://docs.adyen.com/api-explorer/#/CheckoutService/v67/post/payments/details)\n",
        "requestBody": {
          "description": "Payment details.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "details": {
                    "type": "object",
                    "description": "details definition in [Adyen docs description](https://docs.adyen.com/api-explorer/#/CheckoutService/v67/post/payments/details__reqParam_details)."
                  },
                  "paymentData": {
                    "type": "string",
                    "description": "payment field definition in [Adyen docs description](https://docs.adyen.com/api-explorer/#/CheckoutService/v67/post/payments/details__reqParam_paymentData)."
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Payments"
        ],
        "responses": {
          "200": {
            "description": "Visit Adyen [POST /payments/details](https://docs.adyen.com/api-explorer/#/CheckoutService/v67/post/payments/details__section_resParams) for response details"
          }
        }
      }
    },
    "/payments/v1/transactions": {
      "post": {
        "summary": "Create transaction",
        "description": "This endpoint will create a transaction and request a payment through Adyen.\n\nThis endpoint is using the Adyen tokenization flow. For more information:\n- [Adyen Tokenization](https://docs.adyen.com/online-payments/tokenization/create-and-use-tokens)  \n",
        "requestBody": {
          "description": "Transaction details.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionsPaymentRequestBody"
              }
            }
          }
        },
        "tags": [
          "Payments"
        ],
        "responses": {
          "200": {
            "description": "Created transaction entry\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransaction"
                }
              }
            }
          }
        }
      }
    },
    "/published-shifts": {
      "put": {
        "summary": "Publish shifts",
        "tags": [
          "Shift"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShiftPublishRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Bookings completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftPublishResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Unpublish shifts",
        "tags": [
          "Shift"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShiftUnpublishRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Bookings completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftPublishResponse"
                }
              }
            }
          }
        }
      }
    },
    "/registry-data": {
      "get": {
        "summary": "List all registry data",
        "tags": [
          "Registry Data"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "registry-id",
            "description": "Only return data for registry with this ID.",
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of registry data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RegistryData"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new registry data",
        "tags": [
          "Registry Data"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "preprocess",
            "description": "Preprocess data before saving, setting any calculated fields.",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/RegistryData"
        },
        "responses": {
          "200": {
            "description": "Created registry data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryData"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/registry-data/{registryDataId}": {
      "get": {
        "summary": "Get single registry data",
        "tags": [
          "Registry Data"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "registryDataId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registry data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryData"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "put": {
        "summary": "Update registry data",
        "tags": [
          "Registry Data"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "registryDataId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          },
          {
            "in": "query",
            "name": "preprocess",
            "description": "Preprocess data before saving, setting any calculated fields.",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/RegistryData"
        },
        "responses": {
          "200": {
            "description": "Updated registry data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryData"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/registry-data/{registryDataId}/blocked-users": {
      "get": {
        "summary": "List all blocked users for a registry data instance",
        "tags": [
          "Registry Data"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "registryDataId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of blocked users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BlockedUser"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Registry data object not found."
          }
        }
      },
      "post": {
        "summary": "Add a new blocked user",
        "tags": [
          "Registry Data"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "registryDataId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlockedUser"
              }
            }
          },
          "description": "Blocked user.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Created blocked user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockedUser"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed."
          },
          "404": {
            "description": "Registry data object not found."
          }
        }
      }
    },
    "/registry-data/{registryDataId}/blocked-users/{blockedUserId}": {
      "get": {
        "summary": "Get single blocked user instance",
        "tags": [
          "Registry Data"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "registryDataId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          },
          {
            "in": "path",
            "name": "blockedUserId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Blocked user data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockedUser"
                }
              }
            }
          },
          "404": {
            "description": "* Not found.\n* Registry data object not found.\n"
          }
        }
      },
      "put": {
        "summary": "Update blocked user settings",
        "tags": [
          "Registry Data"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "registryDataId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          },
          {
            "in": "path",
            "name": "blockedUserId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "start-date": {
                    "type": "string",
                    "description": "First date of blocked interval.",
                    "format": "iso-date",
                    "example": "2020-07-01"
                  },
                  "end-date": {
                    "type": "string",
                    "description": "Last date of blocked interval.",
                    "format": "iso-date",
                    "example": "2020-12-31"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Blocking reason or comment.",
                    "example": "Previous employee, 6 months cool-down period"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated blocked user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockedUser"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed."
          },
          "404": {
            "description": "* Not found.\n* Registry data object not found.\n"
          }
        }
      },
      "delete": {
        "summary": "Remove blocked user",
        "tags": [
          "Registry Data"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "registryDataId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          },
          {
            "in": "path",
            "name": "blockedUserId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed, no content."
          },
          "400": {
            "description": "Validation failed."
          },
          "404": {
            "description": "* Not found.\n* Registry data object not found.\n"
          }
        }
      }
    },
    "/registry-fields": {
      "get": {
        "summary": "List custom registry fields",
        "tags": [
          "Fields"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "registry-id",
            "description": "Only return data for registry with this ID.",
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of all custom registry fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Field"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new custom registry field",
        "tags": [
          "Fields"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Field"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Newly created registry field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Field"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/registry": {
      "get": {
        "summary": "Index available registers",
        "tags": [
          "Registry"
        ],
        "responses": {
          "200": {
            "description": "List of all custom registers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Registry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new custom registry",
        "tags": [
          "Registry"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Registry"
        },
        "responses": {
          "200": {
            "description": "Newly created registry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/registry/{registryId}": {
      "get": {
        "summary": "Get single custom registry",
        "tags": [
          "Registry"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "registryId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested registry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            }
          },
          "404": {
            "description": "Registry not found"
          }
        }
      },
      "put": {
        "summary": "Update custom registry",
        "tags": [
          "Registry"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "registryId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Registry"
        },
        "responses": {
          "200": {
            "description": "Updated registry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            }
          },
          "404": {
            "description": "Registry not found"
          }
        }
      }
    },
    "/related/v1/orders/{orderId}": {
      "get": {
        "summary": "Fetch order with related collections",
        "description": "Endpoint for fetching data from multiple collections related to an order. Will fetch data related to the order-id.\n",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          },
          {
            "name": "timereports",
            "description": "Specifies if data in the timereports collection should be included in the response. Will fetch timereports in the specified interval and include orphaned timereports.",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": true,
              "default": false
            }
          },
          {
            "name": "approvals",
            "description": "Specifies if data in the approvals collection should be included in the response. Will fetch approvals related to the fetched timereports. Requires the timereport parameter to be set to true.",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": true,
              "default": false
            }
          }
        ],
        "tags": [
          "Related Collections"
        ],
        "responses": {
          "200": {
            "description": "Data from multiple collections",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "orders": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Order"
                      }
                    },
                    "shifts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Shift"
                      }
                    },
                    "timereports": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Timereport"
                      }
                    },
                    "approvals": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Approval"
                      }
                    },
                    "inquiries": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Inquiry"
                      }
                    },
                    "journal": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/JournalEntry"
                      }
                    }
                  }
                },
                "example": {
                  "order": {},
                  "shifts": [],
                  "timereports": [],
                  "approvals": [],
                  "inquiries": [],
                  "journal": []
                }
              }
            }
          }
        }
      }
    },
    "/related/v1/shifts": {
      "get": {
        "summary": "Fetch shifts with related collections",
        "description": "Endpoint for fetching data from multiple collections related to shifts. Will fetch data in the specified interval along with orphaned* items.\n\n\\* *An item not in the current interval, but related to a shift, timereport, or inquiry.*\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/startParam"
          },
          {
            "$ref": "#/components/parameters/endParam"
          },
          {
            "$ref": "#/components/parameters/criteriaParam"
          },
          {
            "name": "inquiries",
            "description": "Specifies if data in the inquiries collection should be included in the response. Will fetch inquiries in the specified interval and include orphaned inquiries.",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": true,
              "default": false
            }
          },
          {
            "name": "timereports",
            "description": "Specifies if data in the timereports collection should be included in the response. Will fetch timereports in the specified interval and include orphaned timereports.",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": true,
              "default": false
            }
          },
          {
            "name": "approvals",
            "description": "Specifies if data in the approvals collection should be included in the response. Will fetch approvals related to the fetched timereports. Requires the timereport parameter to be set to true.",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": true,
              "default": false
            }
          },
          {
            "name": "availabilities",
            "description": "Specifies if data in the availabilities collection should be included in the response. Will fetch availabilities in the specified interval.",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": true,
              "default": false
            }
          },
          {
            "name": "approval-requests",
            "description": "Specifies if data in the approval requests collection should be included in the response. Will fetch approval requests in the specified interval.",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": true,
              "default": false
            }
          },
          {
            "name": "orders",
            "description": "Specifies if data in the orders collection should be included in the response. Will fetch orders related to shifts in the specified interval.",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": true,
              "default": false
            }
          }
        ],
        "tags": [
          "Related Collections"
        ],
        "responses": {
          "200": {
            "description": "Data from multiple collections",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "shifts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Shift"
                      }
                    },
                    "timereports": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Timereport"
                      }
                    },
                    "approvals": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Approval"
                      }
                    },
                    "inquiries": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Inquiry"
                      }
                    },
                    "availabilities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Availability"
                      }
                    },
                    "approval-requests": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ApprovalRequest"
                      }
                    }
                  }
                },
                "example": {
                  "shifts": [],
                  "timereports": [],
                  "approvals": [],
                  "inquiries": [],
                  "availabilities": [],
                  "approval-requests": []
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/bulk/rfqs/incoming/{incomingRfqId}/quoteshifts": {
      "post": {
        "summary": "Create multiple quote shifts",
        "description": "Endpoint for creating an array of new quote shifts.",
        "parameters": [
          {
            "in": "path",
            "name": "incomingRfqId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "description": "Quote shifts to be added",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "properties": {
                    "rfq-shift-id": {
                      "type": "string",
                      "format": "ObjectId",
                      "description": "The corresponding shift-id from the RfQ."
                    },
                    "booked-users": {
                      "type": "array",
                      "description": "A list containing exactly one user id.",
                      "items": {
                        "type": "string",
                        "format": "ObjectId"
                      }
                    },
                    "booked-user": {
                      "type": "object",
                      "description": "Suggested user for this shift",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of worker"
                        },
                        "id-no": {
                          "type": "string",
                          "description": "National identification number (personnummer) of the worker"
                        }
                      },
                      "required": [
                        "name",
                        "id-no"
                      ]
                    },
                    "outgoing-rfq-id": {
                      "type": "string",
                      "description": "Id of the rfq parent this rfq was created from.\n",
                      "format": "ObjectId"
                    },
                    "incoming-rfq-id": {
                      "type": "string",
                      "description": "Id of the RfQ.\n",
                      "format": "ObjectId"
                    }
                  },
                  "required": [
                    "rfq-shift-id",
                    "booked-users",
                    "booked-user",
                    "outgoing-rfq-id",
                    "incoming-rfq-id",
                    "client-id"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Quote shifts - outgoing"
        ],
        "responses": {
          "200": {
            "description": "Newly added quote shifts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuoteShift"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A valid outgoing rfq is required. / Expecting booked users to contain exactly one id.\n"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/bulk/rfqs/outgoing/{outgoingRfqId}/shifts": {
      "post": {
        "summary": "Create multiple RfQ shifts",
        "description": "Bulk request to create multiple RfQ shifts in one call",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RfqShift"
                }
              }
            }
          },
          "description": "RfQ shifts to be added",
          "required": true
        },
        "tags": [
          "RfQ shifts - outgoing"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "outgoingRfqId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly added RfQ shifts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RfqShift"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/rfqs/booked-users": {
      "get": {
        "summary": "Externally booked users",
        "description": "Endpoint for indexing externally booked users. The endpoint will index all users booked on any RFQ shift by any of the caller's suppliers",
        "parameters": [
          {
            "$ref": "#/components/parameters/startParam"
          },
          {
            "$ref": "#/components/parameters/endParam"
          },
          {
            "$ref": "#/components/parameters/criteriaParam"
          }
        ],
        "tags": [
          "RfQs - outgoing"
        ],
        "responses": {
          "200": {
            "description": "An array of users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "id of the user",
                        "format": "ObjectId",
                        "readOnly": true,
                        "example": "5dde7024eded8872705aabcd"
                      },
                      "name": {
                        "type": "string",
                        "description": "name of the user",
                        "readOnly": true,
                        "example": "Dwight Schrute"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/rfqs/clients": {
      "get": {
        "summary": "List available clients",
        "description": "The Rfq Clients endpoint returns a list of all available clients to recieve rfqs from.",
        "tags": [
          "RfQ Clients"
        ],
        "responses": {
          "200": {
            "description": "An array of rfq clients",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RfqSupplier"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/rfqs/clients/confirm/{clientCode}": {
      "put": {
        "summary": "Confirm client",
        "description": "The Confirm Client endpoint allows a user to confirm a supplier invitation from a client.\n",
        "tags": [
          "RfQ Clients"
        ],
        "parameters": [
          {
            "name": "clientCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/rfqs/forms": {
      "get": {
        "summary": "List RfQ forms",
        "description": "Returns an array of all RfQ forms.\n",
        "tags": [
          "RfQ Forms"
        ],
        "responses": {
          "200": {
            "description": "An array of forms.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RfqForm"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create RfQ form",
        "description": "Endpoint for creating a new form.\n",
        "requestBody": {
          "description": "RfQ form to be created.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RfqForm"
                  }
                ]
              }
            }
          }
        },
        "tags": [
          "RfQ Forms"
        ],
        "responses": {
          "200": {
            "description": "Newly added form",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RfqForm"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/rfqs/forms/{FormId}": {
      "get": {
        "summary": "Fetch single RfQ form",
        "description": "Endpoint for fetching a single form.",
        "tags": [
          "RfQ Forms"
        ],
        "parameters": [
          {
            "name": "FormId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Single form",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RfqForm"
                }
              }
            }
          },
          "404": {
            "description": "Form not found"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update single RfQ form",
        "description": "endpoint.",
        "tags": [
          "RfQ Forms"
        ],
        "parameters": [
          {
            "name": "FormId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Single form",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RfqForm"
                }
              }
            }
          },
          "404": {
            "description": "Form not found"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/rfqs/incoming": {
      "get": {
        "summary": "Fetch RfQs",
        "description": "The RfQs endpoint returns an array of all incoming RfQs.\n",
        "tags": [
          "RfQs - incoming"
        ],
        "responses": {
          "200": {
            "description": "An array of RfQs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rfq"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/rfqs/incoming/{incomingRfqId}/quoteshiftresponses": {
      "get": {
        "summary": "Fetch quote shifts responses",
        "description": "Endpoint returns an array of all quote shifts responses.\n",
        "tags": [
          "Quote shift responses - incoming"
        ],
        "parameters": [
          {
            "name": "incomingRfqId",
            "in": "path",
            "description": "The quote shifts response id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of quote shift responses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuoteShiftsResponse"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/rfqs/incoming/{incomingRfqId}/quoteshiftresponses/{incomingResponseId}": {
      "get": {
        "summary": "Fetch single quote shifts response",
        "description": "Endpoint for fetching a single quote shifts response.\n",
        "tags": [
          "Quote shift responses - incoming"
        ],
        "parameters": [
          {
            "name": "incomingRfqId",
            "in": "path",
            "description": "The quote shifts response id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          },
          {
            "name": "incomingResponseId",
            "in": "path",
            "description": "The quote shifts response id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single quote shifts response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteShiftsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Quote not found"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/rfqs/incoming/{incomingRfqId}/quoteshiftresponses/{incomingResponseId}/confirm": {
      "post": {
        "summary": "Confirm quote shifts response",
        "description": "Endpoint for a supplier to confirm a quote shift response.\n\nSide effects:\n* Incoming rfq set to CONFIRMED iff ACCEPTED linked quote shift responses = 0.\n* Linked quote shifts in rfq shift accepted list moved to confirmed list.\n* (When an rfq shift duplicity = confirmed quote shifts, set other quote shifts to REJECTED.)\n* Set linked quote shifts to CONFIRMED.\n",
        "tags": [
          "Quote shift responses - incoming"
        ],
        "parameters": [
          {
            "name": "incomingRfqId",
            "in": "path",
            "description": "The quote shifts response id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          },
          {
            "name": "incomingResponseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated quote shifts response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteShiftsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Quote not found"
          },
          "409": {
            "description": "Quote shift response does not have status ACCEPTED"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/rfqs/incoming/{incomingRfqId}/quoteshiftresponses/{incomingResponseId}/refuse": {
      "post": {
        "summary": "Refuse quote shifts response",
        "description": "Endpoint for a supplier to refuse a quote shift response.\n\nSide effects:\n* Collect all quote shift responses for incoming rfq.\n  * When responses with status ACCEPTED = 0:\n    * if responses with status CONFIRMED = 0: set incoming rfq to REFUSED.\n    * else: set status to CONFIRMED.\n* Linked quote shifts are removed from rfq shift accepted lists.\n* Set linked quote shifts to REFUSED.\n",
        "tags": [
          "Quote shift responses - incoming"
        ],
        "parameters": [
          {
            "name": "incomingRfqId",
            "in": "path",
            "description": "The quote shifts response id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          },
          {
            "name": "incomingResponseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated quote shifts response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteShiftsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Quote not found"
          },
          "409": {
            "description": "Quote shift response does not have status ACCEPTED"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/rfqs/incoming/{incomingRfqId}/quoteshifts": {
      "get": {
        "summary": "List outgoing quote shifts",
        "description": "The quote shifts endpoint returns a list of all quote shifts.\n",
        "tags": [
          "Quote shifts - outgoing"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "incomingRfqId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of quote shifts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuoteShift"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create quote shift",
        "description": "Endpoint for creating a new quote shift.",
        "parameters": [
          {
            "in": "path",
            "name": "incomingRfqId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "description": "Quote shift to be created.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "rfq-shift-id": {
                    "type": "string",
                    "format": "ObjectId",
                    "description": "The corresponding shift-id from the RfQ."
                  },
                  "booked-user": {
                    "type": "object",
                    "description": "Suggested user for this shift",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name of worker"
                      },
                      "id-no": {
                        "type": "string",
                        "description": "National identification number (personnummer) of the worker"
                      },
                      "id": {
                        "type": "string",
                        "format": "ObjectId",
                        "description": "User id of worker"
                      }
                    },
                    "required": [
                      "name",
                      "id-no"
                    ]
                  },
                  "outgoing-rfq-id": {
                    "type": "string",
                    "description": "Id of the rfq parent this rfq was created from.\n",
                    "format": "ObjectId"
                  },
                  "incoming-rfq-id": {
                    "type": "string",
                    "description": "Id of the RfQ.\n",
                    "format": "ObjectId"
                  }
                },
                "required": [
                  "rfq-shift-id",
                  "booked-user",
                  "outgoing-rfq-id",
                  "incoming-rfq-id",
                  "client-id"
                ]
              }
            }
          }
        },
        "tags": [
          "Quote shifts - outgoing"
        ],
        "responses": {
          "200": {
            "description": "Newly added quote shift",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteShift"
                }
              }
            }
          },
          "400": {
            "description": "A valid outgoing rfq is required / Expecting booked users to contain exactly one id\n"
          }
        }
      }
    },
    "/rfqs/v1/rfqs/incoming/{incomingRfqId}/quoteshifts/{quoteShiftId}": {
      "get": {
        "summary": "Fetch single quote shift",
        "description": "Endpoint for fetching a single quote shift.\n",
        "tags": [
          "Quote shifts - outgoing"
        ],
        "parameters": [
          {
            "name": "quoteShiftId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          },
          {
            "in": "path",
            "name": "incomingRfqId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single quote shift",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteShift"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete quote shift",
        "description": "Deletion can only be done if shift is in DRAFT state.",
        "tags": [
          "Quote shifts - outgoing"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "quoteShiftId",
            "description": "Setting ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incomingRfqId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK"
          },
          "400": {
            "description": "Cannot delete quote shift that has been sent"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/rfqs/v1/rfqs/incoming/{incomingRfqId}/quoteshifts/{quoteShiftId}/send": {
      "post": {
        "summary": "Send quote shift",
        "description": "Endpoint for sending quote shift to scheduler.\n",
        "parameters": [
          {
            "name": "quoteShiftId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          },
          {
            "in": "path",
            "name": "incomingRfqId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Quote shifts - outgoing"
        ],
        "responses": {
          "201": {
            "description": "OK"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Already sent"
          }
        }
      }
    },
    "/rfqs/v1/rfqs/incoming/{incomingRfqId}/shifts": {
      "get": {
        "summary": "List rfq shifts",
        "description": "The rfq shifts endpoint returns a list of all incoming rfq shifts.\n",
        "tags": [
          "RfQ shifts - incoming"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "incomingRfqId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of RfQ shifts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RfqShift"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/rfqs/incoming/{incomingRfqId}/shifts/{rfqShiftId}": {
      "get": {
        "summary": "Fetch single RfQ shift",
        "description": "Endpoint for fetching a single RfQ shift.\n",
        "tags": [
          "RfQ shifts - incoming"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "incomingRfqId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          },
          {
            "name": "rfqShiftId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single RfQ shift",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RfqShift"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/rfqs/incoming/{rfqId}": {
      "get": {
        "summary": "Fetch single RfQ",
        "description": "Endpoint for fetching a single RfQ.",
        "tags": [
          "RfQs - incoming"
        ],
        "parameters": [
          {
            "name": "rfqId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single RfQ object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rfq"
                }
              }
            }
          },
          "404": {
            "description": "RfQ not found."
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Archive single RfQ",
        "description": "Endpoint for archiving a single RfQ.",
        "tags": [
          "RfQs - incoming"
        ],
        "parameters": [
          {
            "name": "rfqId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "archived": {
                    "type": "number",
                    "format": "timestamp",
                    "example": 1558604030403
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rfq"
                },
                "example": {
                  "id": "5dde7024eded8872705a0002",
                  "vid": "5dde71e4c9e77c0001730002",
                  "company-id": "5dde6e21c9e77c0001a1e3a7",
                  "created": 1574858788000,
                  "created-by": "5dde6e21c9e77c0001a1e3b0",
                  "valid-from": 1574859236203,
                  "valid-to": 0,
                  "changed-by": "5dde6e21c9e77c0001a1e3b0",
                  "archived": 1558604030403,
                  "form-id": "5dde7024eded8872705a1ff7",
                  "form-vid": "5dde71e4c9e77c000173dd03",
                  "original-duplicity": 3,
                  "values": {},
                  "shift-dates": [
                    "2019-11-29",
                    "2019-11-30",
                    "2019-11-28"
                  ],
                  "expires": 1233545,
                  "client": {
                    "phone": "0123-405060",
                    "email": "name@company.com",
                    "company": "Company AB",
                    "name": "Firstname Surname"
                  },
                  "rfq-no": "13",
                  "client-id": "5dde7024eded8872705a0017",
                  "outgoing-rfq-id": "5dde7024eded8872705a0001"
                }
              }
            }
          },
          "404": {
            "description": "RfQ not found."
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete archived RfQ",
        "description": "Endpoint for deleting an archived RfQ.",
        "tags": [
          "RfQs - incoming"
        ],
        "parameters": [
          {
            "name": "rfqId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted."
          },
          "400": {
            "description": "RfQ not archived."
          },
          "404": {
            "description": "RfQ not found."
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/rfqs/outgoing": {
      "get": {
        "summary": "Fetch Outgoing RfQs",
        "description": "The Outgoing RfQs endpoint returns an array of all outgoing rfq parents.\n",
        "tags": [
          "RfQs - outgoing"
        ],
        "responses": {
          "200": {
            "description": "An array of rfq parents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OutgoingRfq"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create outgoing RfQ",
        "description": "Endpoint for creating a new request for quotes\n\nTo create an RfQ you first need to fetch an order form. You should then use `id`, `vid` and `fields` to build your outgoing RFQ object.\n",
        "requestBody": {
          "description": "Outgoing RfQ object to be created.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OutgoingRfq"
                  },
                  {
                    "required": [
                      "form-id",
                      "form-vid",
                      "client-id",
                      "supplier-id",
                      "values"
                    ]
                  }
                ]
              }
            }
          }
        },
        "tags": [
          "RfQs - outgoing"
        ],
        "responses": {
          "200": {
            "description": "Newly added outgoing RfQ object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutgoingRfq"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/rfqs/outgoing/{outgoingRfqId}": {
      "get": {
        "summary": "Fetch single outgoing RfQ",
        "description": "Endpoint for fetching a single outgoing RfQ.\n",
        "tags": [
          "RfQs - outgoing"
        ],
        "parameters": [
          {
            "name": "outgoingRfqId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single outgoing RfQ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutgoingRfq"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update outgoing RfQ",
        "description": "Send updates to an outgoing RfQ that has not been SENT. Only updates to \"expires\" are allowed otherwise.\n\nSide effects:\n* If \"expires\" is updated, linked incoming RfQ's will also have \"expires\" updated.\n",
        "parameters": [
          {
            "name": "outgoingRfqId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutgoingRfq"
              }
            }
          },
          "required": true
        },
        "tags": [
          "RfQs - outgoing"
        ],
        "responses": {
          "200": {
            "description": "Updated outgoing RfQ object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutgoingRfq"
                }
              }
            }
          },
          "400": {
            "description": "This property cannot be changed after outgoing RfQ has been sent."
          },
          "404": {
            "description": "outgoing RfQ not found"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete archived RfQ",
        "description": "Endpoint for deleting an archived RfQ.",
        "tags": [
          "RfQs - outgoing"
        ],
        "parameters": [
          {
            "name": "rfqId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted."
          },
          "400": {
            "description": "RfQ not archived."
          },
          "404": {
            "description": "RfQ not found."
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/rfqs/outgoing/{outgoingRfqId}/quoteshiftresponses": {
      "get": {
        "summary": "Fetch quote shift responses",
        "description": "Endpoint returns an array of all quote shift responses.\n",
        "tags": [
          "Quote shift responses - outgoing"
        ],
        "parameters": [
          {
            "name": "outgoingRfqId",
            "in": "path",
            "description": "The quote shifts response id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of quote shift responses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuoteShiftsResponse"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create quote shift response",
        "description": "Endpoint for a client to respond to a set of quote shifts.\n\nSide effects:\n* When ACCEPTED, linked quote shifts will be added to the list of accepted quote shifts for respective rfq shifts.\n* Linked quote shifts statuses are updated with the same status.\n* When ACCEPTED, incoming rfq gets same status.\n",
        "tags": [
          "Quote shift responses - outgoing"
        ],
        "parameters": [
          {
            "name": "outgoingRfqId",
            "in": "path",
            "description": "The quote shifts response id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "description": "RfQ parent object to be created.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "Quote shifts state",
                    "enum": [
                      "ACCEPTED",
                      "REJECTED"
                    ]
                  },
                  "supplier-id": {
                    "type": "string",
                    "description": "Id of the company owning the quote shifts.\n",
                    "format": "ObjectId"
                  },
                  "quote-shift-ids": {
                    "type": "array",
                    "description": "List of quote shift ids.",
                    "items": {
                      "type": "string",
                      "format": "ObjectId"
                    }
                  },
                  "outgoing-rfq-id": {
                    "type": "string",
                    "description": "Id of the rfq parent this rfq was created from.\n",
                    "format": "ObjectId"
                  },
                  "incoming-rfq-id": {
                    "type": "string",
                    "description": "Id of the RfQ.\n",
                    "format": "ObjectId"
                  }
                },
                "required": [
                  "status",
                  "supplier-id",
                  "quote-shift-ids",
                  "outgoing-rfq-id",
                  "incoming-rfq-id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Quote shift response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteShiftsResponse"
                }
              }
            }
          },
          "400": {
            "description": "* Outgoing rfq id not valid\n* Status not \"ACCEPTED\" or \"REJECTED\"\n* Quote shift or rfq shift not found\n* Accepted and confirmed quote shifts are more than rfq shift duplicity\n"
          }
        }
      }
    },
    "/rfqs/v1/rfqs/outgoing/{outgoingRfqId}/quoteshiftresponses/{outgoingresponseId}": {
      "get": {
        "summary": "Fetch single quote shifts response",
        "description": "Endpoint for fetching a single quote shifts response.\n",
        "tags": [
          "Quote shift responses - outgoing"
        ],
        "parameters": [
          {
            "name": "outgoingRfqId",
            "in": "path",
            "description": "The quote shifts response id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          },
          {
            "name": "outgoingresponseId",
            "in": "path",
            "description": "The quote shifts response id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single quote shifts response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteShiftsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Quote not found"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/rfqs/outgoing/{outgoingRfqId}/quoteshifts": {
      "get": {
        "summary": "List incoming quote shifts",
        "description": "The quote shifts endpoint returns a list of all quote shifts.\n",
        "tags": [
          "Quote shifts - incoming"
        ],
        "parameters": [
          {
            "name": "outgoingRfqId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of quote shifts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuoteShift"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/rfqs/outgoing/{outgoingRfqId}/quoteshifts/{quoteShiftId}": {
      "get": {
        "summary": "Fetch single quote shift",
        "description": "Endpoint for fetching a single quote shift.\n",
        "tags": [
          "Quote shifts - incoming"
        ],
        "parameters": [
          {
            "name": "quoteShiftId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          },
          {
            "name": "outgoingRfqId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single quote shift",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteShift"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/rfqs/outgoing/{outgoingRfqId}/send": {
      "post": {
        "summary": "Send RfQs",
        "description": "Endpoint for sending RfQs to suppliers.\n",
        "parameters": [
          {
            "name": "outgoingRfqId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "description": "List of suppliers.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "List of suppliers to create RfQs for.",
                "properties": {
                  "supplier-company-ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "ObjectId"
                    }
                  }
                },
                "required": [
                  "supplier-company-ids"
                ]
              }
            }
          }
        },
        "tags": [
          "RfQs - outgoing"
        ],
        "responses": {
          "201": {
            "description": "OK"
          },
          "409": {
            "description": "Already sent"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/rfqs/outgoing/{outgoingRfqId}/shifts": {
      "get": {
        "summary": "List rfq shifts",
        "description": "The rfq shifts endpoint returns a list of all outgoing rfq shifts.\n",
        "tags": [
          "RfQ shifts - outgoing"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "outgoingRfqId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of RfQ shifts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RfqShift"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create RfQ shift",
        "description": "Endpoint for creating a new RfQ shift\n\nTo create an RfQ shift you first need to create an outgoing RfQ. You should then use `id` build your RFQ shift object.\n",
        "tags": [
          "RfQ shifts - outgoing"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "outgoingRfqId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "description": "RfQ shift object to be created.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RfqShift"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Newly added RfQ shift",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RfqShift"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/rfqs/outgoing/{outgoingRfqId}/shifts/{rfqShiftId}": {
      "get": {
        "summary": "Fetch single RfQ shift",
        "description": "Endpoint for fetching a single RfQ shift.\n",
        "tags": [
          "RfQ shifts - outgoing"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "outgoingRfqId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          },
          {
            "name": "rfqShiftId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single RfQ shift",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RfqShift"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/rfqs/outgoing/{outgoingRfqId}/shifts/{rfqShiftId}/archive": {
      "put": {
        "summary": "Archive single RfQ shift",
        "description": "Endpoint for archiving a single RfQ shift. Will also archive quote shifts and unbooked shift linked to the rfq shift\n",
        "tags": [
          "RfQ shifts - outgoing"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "outgoingRfqId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          },
          {
            "name": "rfqShiftId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single RfQ shift",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RfqShift"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/rfqs/outgoing/{outgoingRfqId}/void": {
      "put": {
        "summary": "Void RfQ",
        "description": "Endpoint for voiding an incoming rfq. Will also archive rfq shifts in the rfq and unlink shifts related to the rfq.\n",
        "parameters": [
          {
            "name": "outgoingRfqId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "RfQs - outgoing"
        ],
        "responses": {
          "200": {
            "description": "Updated outgoing RfQ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutgoingRfq"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/rfqs/suppliers": {
      "get": {
        "summary": "List RfQ suppliers",
        "description": "The RfQ Suppliers endpoint returns a list of all invited and active RfQ Suppliers.\n",
        "tags": [
          "RfQ Suppliers"
        ],
        "responses": {
          "200": {
            "description": "An array of rfq suppliers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RfqSupplier"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create RfQ Suppliers",
        "description": "Endpoint for creating a RfQ Supplier. When the RfQ Supplier is created, an email invitation will be sent to the entered email.\n",
        "tags": [
          "RfQ Suppliers"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RfqSupplier"
              }
            }
          },
          "description": "RfQ Supplier to be created.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "An array of RfQ Supplier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RfqSupplier"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/rfqs/suppliers/{supplierId}": {
      "get": {
        "summary": "Fetch single RfQ Supplier",
        "description": "Endpoint for fetching a single RfQ Supplier",
        "tags": [
          "RfQ Suppliers"
        ],
        "responses": {
          "200": {
            "description": "Single rfq supplie",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RfqSupplier"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Rfq Supplier not found"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/rfqs/v1/shifts/{shiftId}/booked-users": {
      "get": {
        "summary": "Externally booked users by shift",
        "description": "Endpoint for fetching externally booked users for a specific shift",
        "tags": [
          "RfQs - outgoing"
        ],
        "parameters": [
          {
            "name": "shiftId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId",
              "example": "60defbca60f6dea92ca82caa",
              "description": "Id of the shift"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of booked users for the specified shift",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "ObjectId",
                      "description": "Id of the user",
                      "example": "60defbbe5f3eee7be0a12413"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the user",
                      "example": "Kevin Malone"
                    }
                  },
                  "example": [
                    {
                      "id": "60defc172bddad389b645c2f",
                      "name": "David Wallace"
                    },
                    {
                      "id": "60defc33637d0d644e869a7d",
                      "name": "Nellie Bertram"
                    },
                    {
                      "id": "60defc4fb32cb4dcb5276269",
                      "name": "Mose"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/roles/v2": {
      "get": {
        "summary": "Fetch all roles",
        "description": "Endpoint for fetching all roles",
        "tags": [
          "Roles"
        ],
        "responses": {
          "200": {
            "description": "Roles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new role",
        "description": "Endpoint for creating new roles",
        "tags": [
          "Roles"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          },
          "description": "Role to be created",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Created role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/roles/v2/{roleId}": {
      "get": {
        "summary": "Fetch role",
        "description": "Endpoint for fetching role",
        "tags": [
          "Roles"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "404": {
            "description": "Role not found"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update role",
        "description": "Endpoint for updating role",
        "tags": [
          "Roles"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          },
          "description": "Fields to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "404": {
            "description": "Role not found"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/roles/v2/abilities": {
      "get": {
        "summary": "Fetch all abilties",
        "description": "Endpoint for fetching all abilities.",
        "tags": [
          "Roles"
        ],
        "responses": {
          "200": {
            "description": "List of all abilities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "shiftcreate"
                      },
                      "object": {
                        "type": "string",
                        "description": "Collection of the ability",
                        "example": "shifts"
                      },
                      "action": {
                        "type": "string",
                        "description": "Action of the ability",
                        "example": "create"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/settings/v1/company": {
      "get": {
        "summary": "Get company settings",
        "description": "Fetch all stored settings for the users company.",
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "description": "Setting values",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Preference"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "post": {
        "summary": "Create company setting",
        "description": "Requires `manager` role or `write:company` scope.",
        "tags": [
          "Settings"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Preference"
              }
            }
          },
          "description": "Preference to add",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Newly added preference object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Preference"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/settings/v1/company/{settingId}": {
      "get": {
        "summary": "Get company setting",
        "tags": [
          "Settings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "settingId",
            "description": "Setting ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stored value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Preference"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "put": {
        "summary": "Update company setting",
        "description": "Requires `manager` role or `write:company` scope.",
        "tags": [
          "Settings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "settingId",
            "description": "Setting ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Preference"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated setting value",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "delete": {
        "summary": "Delete company setting",
        "description": "Requires `manager` role or `write:company` scope.",
        "tags": [
          "Settings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "settingId",
            "description": "Setting ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Preference object with setting id as key and value null",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Preference"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/settings/v1/personal": {
      "get": {
        "summary": "Get personal settings",
        "description": "Fetch all stored settings for the user.",
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "description": "Settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Preference"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "post": {
        "summary": "Create personal setting",
        "tags": [
          "Settings"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Preference"
              }
            }
          },
          "description": "Preference to add",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Newly added preference object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Preference"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/settings/v1/personal/{settingId}": {
      "get": {
        "summary": "Get personal setting",
        "tags": [
          "Settings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "settingId",
            "description": "Setting ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stored value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Preference"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "put": {
        "summary": "Update personal setting",
        "tags": [
          "Settings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "settingId",
            "description": "Setting ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Preference"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated setting value",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "delete": {
        "summary": "Delete personal setting",
        "tags": [
          "Settings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "settingId",
            "description": "Setting ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Preference object with setting id as key and value null",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Preference"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/settings/v1/retention-policy/{registryId}": {
      "get": {
        "summary": "Get retention policy",
        "description": "Given a registry id, get number of days until an archived entity is deleted, including domainlog entries.",
        "tags": [
          "Registry"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "registryId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retention policy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Registry id"
                    },
                    "retention-limit-days": {
                      "type": "integer",
                      "description": "Number of days"
                    }
                  }
                },
                "example": {
                  "id": "5dde7024eded8872705a0000",
                  "retention-limit-days": 90
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "put": {
        "summary": "Set retention policy",
        "description": "Given a registry id, set the number of days until an archived entity is deleted, including domainlog entries.",
        "tags": [
          "Registry"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "registryId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "retention-limit-days": {
                    "type": "integer",
                    "description": "Number of days"
                  }
                },
                "required": [
                  "retention-limit-days"
                ]
              },
              "example": {
                "retention-limit-days": 90
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Retention limit is not a positive integer"
          }
        }
      }
    },
    "/shift-exchanges": {
      "get": {
        "summary": "Fetch shift exchanges",
        "tags": [
          "Shift Exchanges"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "recipient-id",
            "description": "Filter on id of the recipient",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ObjectId",
              "example": "6098ecce5f56b9c7b3f9a42b"
            }
          },
          {
            "in": "query",
            "name": "sender-id",
            "description": "Filter on id of the sender",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ObjectId",
              "example": "6098ecce5f56b9c7b3f9a42b"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of shifts.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShiftExchange"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create shift exchange",
        "description": "Upon creation, a notification is sent to the request recipient.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShiftExchange"
              }
            }
          },
          "description": "Shift exchange to be added.",
          "required": true
        },
        "tags": [
          "Shift Exchanges"
        ],
        "responses": {
          "200": {
            "description": "Newly added shift exchange",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftExchange"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/shift-exchanges/{shiftExchangeId}": {
      "get": {
        "summary": "Fetch shift exchange",
        "parameters": [
          {
            "name": "shiftExchangeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Shift Exchanges"
        ],
        "responses": {
          "200": {
            "description": "Shift exchange object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftExchange"
                }
              }
            }
          },
          "404": {
            "description": "Shift exchange not found"
          }
        }
      }
    },
    "/shift-exchanges/{shiftExchangeId}/accept": {
      "put": {
        "summary": "Accept shift exchange",
        "description": "Upon acceptance, a notification is sent to the sender.",
        "parameters": [
          {
            "name": "shiftExchangeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Shift Exchanges"
        ],
        "responses": {
          "200": {
            "description": "Accepted shift exchange"
          },
          "400": {
            "description": "* Validation failed\n* Already ACCEPTED/APPROVED/REJECTED/EXPIRED/CLOSED\n"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Exchange shift not found"
          }
        }
      }
    },
    "/shift-exchanges/{shiftExchangeId}/approve": {
      "put": {
        "summary": "Approve shift exchange",
        "description": "Approve a shift exchange.",
        "parameters": [
          {
            "name": "shiftExchangeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Shift Exchanges"
        ],
        "responses": {
          "200": {
            "description": "Approved shift exchange"
          },
          "400": {
            "description": "* Validation failed\n* Already ACCEPTED/APPROVED/REJECTED/EXPIRED/CLOSED\n"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Exchange shift not found"
          }
        }
      }
    },
    "/shift-exchanges/{shiftExchangeId}/reject": {
      "put": {
        "summary": "Reject shift exchange",
        "description": "Upon rejection, a notification is sent to the sender.",
        "parameters": [
          {
            "name": "shiftExchangeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Shift Exchanges"
        ],
        "responses": {
          "200": {
            "description": "Rejected shift exchange"
          },
          "400": {
            "description": "* Validation failed\n* Already ACCEPTED/APPROVED/REJECTED/EXPIRED/CLOSED\n"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Exchange shift not found"
          }
        }
      }
    },
    "/shifts": {
      "get": {
        "summary": "Fetch planned shifts",
        "parameters": [
          {
            "$ref": "#/components/parameters/startParam"
          },
          {
            "$ref": "#/components/parameters/endParam"
          },
          {
            "$ref": "#/components/parameters/criteriaParam"
          },
          {
            "in": "query",
            "name": "booked-users",
            "description": "Find shifts where the given user id is booked",
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Shift"
        ],
        "responses": {
          "200": {
            "description": "Array of shifts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shift"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create planned shift",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Shift"
              }
            }
          },
          "description": "Shift to be added",
          "required": true
        },
        "tags": [
          "Shift"
        ],
        "responses": {
          "200": {
            "description": "Newly added shift object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shift"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/shifts/{shiftId}": {
      "get": {
        "summary": "Fetch planned shift",
        "parameters": [
          {
            "name": "shiftId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Shift"
        ],
        "responses": {
          "200": {
            "description": "Shift object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shift"
                }
              }
            }
          },
          "404": {
            "description": "Shift not found"
          }
        }
      },
      "put": {
        "summary": "Update planned shift",
        "parameters": [
          {
            "name": "shiftId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Shift"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Shift"
        ],
        "responses": {
          "200": {
            "description": "Updated shift object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shift"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          },
          "404": {
            "description": "Shift not found"
          }
        }
      },
      "delete": {
        "summary": "Delete planned shift",
        "parameters": [
          {
            "name": "shiftId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Shift"
        ],
        "responses": {
          "200": {
            "description": "Delete successful"
          },
          "400": {
            "description": "Cannot delete shift linked to a timereport"
          },
          "500": {
            "description": "Repetition mode set to 'following', but no repetition id set"
          }
        }
      }
    },
    "/shifts/{shiftId}/prepared-exchanges": {
      "get": {
        "summary": "Fetch prepared shift exchanges",
        "description": "To be used with Shift Exchanges API. Fetches an array of prepared Shift Exchanges for the requested shift. The shifts in the response will be filtered by user permissions (tags) and shifts that might potentionally overlap after exchange has occured.\n",
        "parameters": [
          {
            "name": "shiftId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start of interval",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2020-01-01"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End of interval",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2020-01-08"
            }
          }
        ],
        "tags": [
          "Shift Exchanges"
        ],
        "responses": {
          "200": {
            "description": "Object including exchangeable shifts and the permitted users for each shift.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "sender-id": {
                        "type": "string",
                        "format": "ObjectId",
                        "description": "ID of exchange request sender.",
                        "example": "5dde7024eded8872705aabd2"
                      },
                      "sender-shift-id": {
                        "type": "string",
                        "format": "ObjectId",
                        "description": "Shift to be changed out.",
                        "example": "5dde7024eded8872705aabd3"
                      },
                      "recipient-id": {
                        "type": "string",
                        "format": "ObjectId",
                        "description": "ID of exchange request recipient.",
                        "example": "5dde7024eded8872705aabd4"
                      },
                      "recipient-shift-id": {
                        "type": "string",
                        "format": "ObjectId",
                        "description": "Shift belonging to recipient, to be changed in.",
                        "example": "5dde7024eded8872705aabd5"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "ShiftId invalid format"
          },
          "404": {
            "description": "Shift not found"
          }
        }
      }
    },
    "/subscription/activate": {
      "post": {
        "summary": "Activate Subscriptions",
        "description": "Active subscription\n",
        "requestBody": {
          "description": "Subscription options.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "currency": {
                    "type": "string",
                    "description": "Subscription currency",
                    "example": "SEK"
                  },
                  "discount-code": {
                    "type": "string",
                    "description": "Discount code used when activating subscription",
                    "example": "TIMEZYNK2021"
                  }
                },
                "required": [
                  "start-date",
                  "title"
                ]
              }
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "responses": {
          "200": {
            "description": "Subscription activated - Subscription entry in response body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Subscriptions"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions": {
      "get": {
        "summary": "Index subscriptions",
        "description": "The Subscriptions endpoint returns a list of all subscriptions activated by the current company.\n",
        "tags": [
          "Subscriptions"
        ],
        "responses": {
          "200": {
            "description": "An array of subscriptions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Subscriptions"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/timereports": {
      "get": {
        "summary": "Fetch time reports",
        "tags": [
          "Time Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/startParam"
          },
          {
            "$ref": "#/components/parameters/endParam"
          },
          {
            "$ref": "#/components/parameters/criteriaParam"
          },
          {
            "in": "query",
            "name": "user-id",
            "description": "Find time reports for the given user id",
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of time reports",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Timereport"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new time report",
        "tags": [
          "Time Reports"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Timereport"
        },
        "responses": {
          "200": {
            "description": "Created time report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timereport"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/timereports/{reportId}": {
      "get": {
        "summary": "Fetch time report",
        "tags": [
          "Time Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "reportId",
            "description": "Time report id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Time report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timereport"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "put": {
        "summary": "Update time report",
        "tags": [
          "Time Reports"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "reportId",
            "description": "Time report id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Timereport"
        },
        "responses": {
          "200": {
            "description": "Updated time report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timereport"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/username/{username}": {
      "get": {
        "summary": "Check username availability",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "username",
            "description": "Username to be validated",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "JohnDoe"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - Username available"
          },
          "400": {
            "description": "Bad Request - Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "description": "Status code. Always 400.",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Username is considered a url."
                    },
                    "error-code": {
                      "type": "string",
                      "enum": [
                        "USERNAME_NO_URL",
                        "INVALID_USERNAME"
                      ],
                      "description": "Error code.",
                      "example": "USERNAME_NO_URL"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Username already in use"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Users",
        "description": "The Users endpoint returns information about all the registered users for this company.\n",
        "parameters": [
          {
            "name": "role",
            "in": "query",
            "description": "Search by user role",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "An array of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create user",
        "description": "Add a new user to the company",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "User object to be added to the company",
          "required": true
        },
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "Newly added user object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "summary": "Fetch single user",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single user object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "summary": "Update user",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated user object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/work-hours-template/{templateId}": {
      "get": {
        "summary": "Fetch work hours template",
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "tags": [
          "Work hours"
        ],
        "responses": {
          "200": {
            "description": "Template object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkHoursTemplate"
                }
              }
            }
          },
          "404": {
            "description": "Work hours template not found"
          }
        }
      },
      "put": {
        "summary": "Update work hours template",
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkHoursTemplate"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Work hours"
        ],
        "responses": {
          "200": {
            "description": "Updated template object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkHoursTemplate"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          },
          "404": {
            "description": "Work hours template not found"
          }
        }
      }
    },
    "/work-hours-templates": {
      "get": {
        "summary": "Fetch work hours templates",
        "tags": [
          "Work hours"
        ],
        "responses": {
          "200": {
            "description": "Array of templates.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkHoursTemplate"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create work hours template",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkHoursTemplate"
              }
            }
          },
          "description": "Template to be added.",
          "required": true
        },
        "tags": [
          "Work hours"
        ],
        "responses": {
          "200": {
            "description": "Newly added level entry object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkHoursTemplate"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Ability": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Collection of the ability",
            "example": "shifts"
          },
          "action": {
            "type": "string",
            "description": "Action of the ability",
            "example": "create"
          },
          "conditions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "object",
          "action"
        ]
      },
      "AdyenInitiatePaymentRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "object",
            "properties": {
              "currency": {
                "type": "string",
                "description": "Currency code. Only used to record the customer's selected currency when adding subscription payment method."
              }
            }
          },
          "browserInfo": {
            "type": "object",
            "description": "Full schema definition at [Adyen docs](payments__reqParam_browserInfo)."
          },
          "paymentMethod": {
            "type": "object",
            "description": "Selected payment method from  /payment/v1/methods response. Full schema definition at [Adyen docs](https://docs.adyen.com/api-explorer/#/CheckoutService/v67/post/payments__reqParam_paymentMethod)."
          },
          "shopperEmail": {
            "type": "string",
            "format": "email",
            "description": "Email of the shopper. More info at [Adyen docs](https://docs.adyen.com/api-explorer/#/CheckoutService/v68/post/payments__reqParam_shopperEmail)."
          }
        },
        "required": [
          "amount",
          "browserInfo",
          "paymentMethod"
        ]
      },
      "Approval": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "approved-id": {
                "type": "string",
                "description": "Id of the approved timereport",
                "format": "ObjectId"
              },
              "approved-vid": {
                "type": "string",
                "description": "Vid of the approved timereport",
                "format": "ObjectId"
              }
            },
            "required": [
              "approved-id",
              "approved-vid"
            ]
          }
        ]
      },
      "ApprovalRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "Email address to where the approval request should be sent.",
                "example": "john@doe.com"
              },
              "subject": {
                "type": "string",
                "description": "Email subject."
              },
              "expires": {
                "type": "number",
                "description": "Epoch timestamp of when the request will expire.",
                "example": 1611070532861
              },
              "response": {
                "type": "string",
                "description": "Response of the request.",
                "enum": [
                  "pending",
                  "approved",
                  "rejected"
                ]
              },
              "response-at": {
                "type": "number",
                "description": "Epoch timestamp of when the response was recorded.",
                "example": 1611070532861
              },
              "comment": {
                "type": "string",
                "description": "Optional comment.",
                "example": 1611070532861
              },
              "start": {
                "type": "string",
                "format": "local-date-time",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?$",
                "description": "Start of the approval request without time zone (i.e. 2019-04-30T15:41:00.000)"
              },
              "end": {
                "type": "string",
                "format": "local-date-time",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?$",
                "description": "End of the approval request without time zone (i.e. 2019-04-30T15:41:00.000)"
              },
              "html": {
                "type": "string",
                "description": "Html content of the approval request."
              },
              "reports": {
                "type": "array",
                "description": "Array of the time reports included in the approval request.",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Id of the time report"
                    },
                    "vid": {
                      "type": "string",
                      "description": "Vid of the time report"
                    }
                  }
                }
              }
            },
            "required": [
              "email",
              "subject",
              "expires",
              "response",
              "start",
              "end",
              "html",
              "reports"
            ]
          }
        ]
      },
      "ArticleFormula": {
        "type": "object",
        "description": "Article formula.",
        "properties": {
          "formula": {
            "type": "object",
            "description": "Formula for more complex calculations.\nOperator is applied between each operand. For example\n```json\n{ operands: [{ value: 1 }, { value: 2 }, { value:3 }], operator: \"+\" }\n```\nmeans `1 + 2 + 3`\n",
            "properties": {
              "operands": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ArticleFormula"
                }
              },
              "operator": {
                "type": "string",
                "enum": [
                  "+",
                  "-",
                  "*",
                  "/",
                  "MIN",
                  "MAX",
                  "AVG"
                ],
                "example": "+"
              }
            },
            "required": [
              "operands",
              "operator"
            ]
          },
          "field-id": {
            "type": "string",
            "format": "ObjectId",
            "description": "Field ID reference where value should be fetched. Used as default value if formula is null or returns null.",
            "example": "507f191e810c19729de860ea"
          },
          "value": {
            "type": "number",
            "description": "Fixed value. Default value if formula value and field-id referenced value are both null.",
            "example": 42
          }
        }
      },
      "Availability": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "Title describing this availability"
              },
              "start": {
                "type": "string",
                "format": "local-date-time",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?$",
                "description": "Start of shift without time zone (i.e. 2019-04-30T15:41:00.000)"
              },
              "end": {
                "type": "string",
                "format": "local-date-time",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?$",
                "description": "End of shift without time zone (i.e. 2019-04-30T15:41:00.000)"
              },
              "user-id": {
                "type": "string",
                "description": "User ID",
                "format": "ObjectId"
              },
              "available": {
                "type": "boolean",
                "description": "Does this mark the user as available or not available."
              },
              "read-only": {
                "type": "boolean",
                "description": "True if this availability is created via an integration and should not be changed.",
                "readOnly": true
              },
              "meta": {
                "type": "object",
                "description": "Field that an integration might use to store meta-data about the availability"
              }
            },
            "required": [
              "start",
              "end",
              "user-id",
              "available"
            ]
          }
        ]
      },
      "BaseArticle": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID",
            "format": "ObjectId",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "description": "Title describing the article",
            "example": "Qualified overtime"
          },
          "currency": {
            "type": "string",
            "description": "Article currency in ISO 4217 format",
            "example": "USD"
          },
          "price": {
            "type": "number",
            "description": "Price in specified currency",
            "example": 19.99,
            "deprecated": true
          },
          "price-formula": {
            "$ref": "#/components/schemas/ArticleFormula"
          },
          "price-settings": {
            "type": "object",
            "description": "Settings for calculation and interpretation of price",
            "deprecated": true
          },
          "unit": {
            "type": "string",
            "description": "Article unit. Hours, pieces, kilometers, etc.",
            "example": "h"
          },
          "factor": {
            "type": "number",
            "description": "Factor to multiply the article with after its nominal value has been calculated",
            "example": 0.5
          },
          "calculation": {
            "type": "string",
            "enum": [
              "shifts",
              "shifts_no_users",
              "dates",
              "days",
              "field"
            ],
            "description": "Controls how the article value is calculated by the agreement engine.\n * `null` or `undefined` - Use reported hours\n * `shifts` - Count the number of shifts that generated the article and divide the value over all applicable users\n * `shifts_no_users` - Count the number of shifts that generated the article and give each user the full count\n * `dates` - Count the number of distinct dates spanned by the reports\n * `days` - Find the minumum number of 24-hours periods required to fill the reported time spanned\n * `field` - Fetch the value from a numeric field\n"
          },
          "calculation-settings": {
            "type": "object",
            "description": "Settings for calculation and interpretation of article count"
          },
          "archived": {
            "type": "number",
            "description": "Timestamp in milliseconds for when the object was archived, or null if it is still active",
            "example": null
          }
        },
        "required": [
          "id",
          "title"
        ]
      },
      "BaseOrder": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the order",
                "readOnly": true
              },
              "form-id": {
                "type": "string",
                "description": "Id of the order form used to create the order.",
                "format": "ObjectId"
              },
              "form-vid": {
                "type": "string",
                "description": "Vid of the order form used to create the order.",
                "format": "ObjectId"
              },
              "original-duplicity": {
                "type": "number",
                "description": "Original (when created) amount of people to be booked for the this order.",
                "readOnly": true
              },
              "values": {
                "type": "object",
                "description": "Key-value store for custom fields defined in the order form associated with the order.\nThe key should be set to the `field-template-id`. See `fields` property in Order Form.\n",
                "default": {}
              },
              "shift-dates": {
                "type": "array",
                "description": "All dates which where shifts are occuring during the order",
                "items": {
                  "type": "string"
                },
                "readOnly": true
              }
            }
          }
        ]
      },
      "BaseShift": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "start": {
                "type": "string",
                "format": "local-date-time",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?$",
                "description": "Start of shift without time zone (i.e. 2019-04-30T15:41:00.000)"
              },
              "end": {
                "type": "string",
                "format": "local-date-time",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?$",
                "description": "End of shift without time zone (i.e. 2019-04-30T15:41:00.000)"
              },
              "breaks": {
                "type": "array",
                "description": "List of breaks",
                "items": {
                  "$ref": "#/components/schemas/Break"
                }
              },
              "values": {
                "type": "object",
                "description": "Values for custom registry fields"
              },
              "group-id": {
                "type": "string",
                "format": "ObjectId",
                "description": "Common group ID for grouping several shifts together"
              }
            }
          }
        ]
      },
      "BasicObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID",
            "format": "ObjectId",
            "readOnly": true,
            "example": "5dde7024eded8872705aabcd"
          },
          "vid": {
            "type": "string",
            "description": "Unique identifier representing a specific version of an item",
            "format": "ObjectId",
            "readOnly": true,
            "example": "5dde7024eded8872705aabce"
          },
          "company-id": {
            "type": "string",
            "description": "Id of the company who owns this item.",
            "format": "ObjectId",
            "readOnly": true,
            "example": "5dde7024eded8872705aabcf"
          },
          "created": {
            "type": "number",
            "description": "Timestamp in milliseconds for when the object was created",
            "readOnly": true,
            "example": 1558604010307
          },
          "created-by": {
            "type": "string",
            "description": "User ID the the user that created the object.",
            "readOnly": true,
            "format": "ObjectId",
            "example": "5dde7024eded8872705aabd0"
          },
          "valid-from": {
            "type": "number",
            "format": "timestamp",
            "description": "Timestamp in milliseconds for when the object was last changed",
            "readOnly": true,
            "example": 1558604030403
          },
          "valid-to": {
            "type": "number",
            "format": "timestamp",
            "readOnly": true,
            "example": 1558604030455
          },
          "changed-by": {
            "type": "string",
            "description": "User ID the the user that last changed the object.",
            "readOnly": true,
            "format": "ObjectId",
            "example": "5dde7024eded8872705aabd1"
          },
          "archived": {
            "type": "integer",
            "description": "Timestamp in milliseconds for when the object was archived, or null if it is still active",
            "nullable": true,
            "example": null
          }
        },
        "required": [
          "id"
        ]
      },
      "BlockedUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID of blocked user.",
            "format": "ObjectId",
            "example": "5c88de8e1ae9c4230e51ab8a"
          },
          "start-date": {
            "type": "string",
            "description": "First date of blocked interval.",
            "format": "iso-date",
            "example": "2020-07-01"
          },
          "end-date": {
            "type": "string",
            "description": "Last date of blocked interval, if omitted then set to 90 days.",
            "format": "iso-date",
            "example": "2020-12-31"
          },
          "comment": {
            "type": "string",
            "description": "Blocking reason or comment.",
            "example": "Previous employee, 6 months cool-down period"
          },
          "created-by": {
            "type": "string",
            "description": "User ID of creating user.",
            "format": "ObjectId",
            "example": "5c6ad17093d052121a82a6ae",
            "readOnly": true
          },
          "created": {
            "type": "number",
            "description": "Timestamp when this block was created.",
            "format": "timestamp",
            "readOnly": true,
            "example": 1558604030403
          }
        },
        "required": [
          "id",
          "start-date"
        ]
      },
      "Break": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "format": "local-date-time",
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?$",
            "description": "Start of shift without time zone (i.e. 2019-04-30T15:41:00.000)"
          },
          "end": {
            "type": "string",
            "format": "local-date-time",
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?$",
            "description": "End of shift without time zone (i.e. 2019-04-30T15:41:00.000)"
          }
        },
        "required": [
          "start",
          "end"
        ]
      },
      "Client": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "Phone number of client"
          },
          "email": {
            "type": "string",
            "description": "Email of client"
          },
          "company": {
            "type": "string",
            "description": "Company name"
          },
          "name": {
            "type": "string",
            "description": "Name of client"
          }
        },
        "example": {
          "phone": "0123-405060",
          "email": "name@company.com",
          "company": "Company AB",
          "name": "Firstname Surname"
        }
      },
      "DateSelector": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "format": "date",
            "description": "Start of matching interval"
          },
          "end": {
            "type": "string",
            "format": "date",
            "description": "End of matching interval"
          },
          "criteria": {
            "type": "string",
            "description": "Define how to match the interval",
            "enum": [
              "intersects",
              "start-in"
            ],
            "default": "start-in"
          }
        }
      },
      "DiscountCodes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "The discount code",
                "example": "604241714cc83a2b454df71e"
              },
              "type": {
                "type": "string",
                "description": "Type of discount code",
                "enum": [
                  "REFERRAL"
                ]
              },
              "companies": {
                "type": "array",
                "description": "A read only list of companies that have used the discount code",
                "readOnly": true,
                "items": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "ObjectId",
                      "description": "Id of the company",
                      "example": "60424216b2ddf96af1266c26"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the company",
                      "example": "Timezynk"
                    },
                    "date": {
                      "type": "string",
                      "description": "Date when the discount code was used",
                      "example": "2020-12-03"
                    }
                  }
                }
              }
            },
            "required": [
              "code",
              "type"
            ]
          }
        ]
      },
      "Discounts": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "start-date": {
                "type": "string",
                "description": "Start of the discounts",
                "example": "2020-12-03"
              },
              "end-date": {
                "type": "string",
                "description": "End of the discount",
                "example": "2021-12-31"
              },
              "title": {
                "type": "string",
                "description": "Discount title",
                "example": "Referral discount"
              },
              "account": {
                "type": "string"
              },
              "discount": {
                "type": "number",
                "format": "float",
                "description": "Discount amount"
              },
              "calculation": {
                "type": "string",
                "description": "How to calculate discount based on discount field value.",
                "enum": [
                  "percent",
                  "fixed"
                ]
              },
              "type": {
                "type": "string",
                "description": "Type of discount",
                "enum": [
                  "SUBSCRIPTION_DISCOUNT_CODE",
                  "REFERRAL_KICKBACK"
                ]
              },
              "weight": {
                "type": "number",
                "format": "int32"
              }
            },
            "required": [
              "start-date",
              "title",
              "discount",
              "calculation",
              "type"
            ]
          }
        ]
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Error code"
          },
          "error": {
            "type": "string",
            "description": "Error message"
          },
          "trace": {
            "type": "string",
            "description": "Optional stack trace"
          }
        },
        "required": [
          "code"
        ]
      },
      "ExcelBorder": {
        "type": "string",
        "description": "Excel border",
        "enum": [
          "thin",
          "medium",
          "thick"
        ],
        "example": "thin"
      },
      "ExcelCell": {
        "type": "object",
        "description": "Cell",
        "properties": {
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ],
            "description": "Cell value",
            "example": "=SUM(A1:B3)"
          },
          "data-format": {
            "type": "string",
            "description": "Cell data format, see https://poi.apache.org/apidocs/dev/org/apache/poi/ss/usermodel/BuiltinFormats.html",
            "example": "#,##0"
          },
          "style": {
            "type": "object",
            "properties": {
              "halign": {
                "type": "string",
                "description": "Horizontal alignment",
                "enum": [
                  "left",
                  "right",
                  "center"
                ],
                "example": "center"
              },
              "valign": {
                "type": "string",
                "description": "Vertical alignment",
                "enum": [
                  "top",
                  "bottom",
                  "center"
                ],
                "example": "center"
              },
              "background": {
                "$ref": "#/components/schemas/ExcelColor"
              },
              "border-left": {
                "$ref": "#/components/schemas/ExcelBorder"
              },
              "border-top": {
                "$ref": "#/components/schemas/ExcelBorder"
              },
              "border-right": {
                "$ref": "#/components/schemas/ExcelBorder"
              },
              "border-bottom": {
                "$ref": "#/components/schemas/ExcelBorder"
              },
              "left-border-color": {
                "$ref": "#/components/schemas/ExcelColor"
              },
              "top-border-color": {
                "$ref": "#/components/schemas/ExcelColor"
              },
              "right-border-color": {
                "$ref": "#/components/schemas/ExcelColor"
              },
              "bottom-border-color": {
                "$ref": "#/components/schemas/ExcelColor"
              },
              "font": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Arial"
                  },
                  "color": {
                    "$ref": "#/components/schemas/ExcelColor"
                  },
                  "bold": {
                    "type": "boolean",
                    "description": "Bold font",
                    "example": false
                  },
                  "italic": {
                    "type": "boolean",
                    "description": "Italic font",
                    "example": false
                  }
                }
              }
            }
          }
        }
      },
      "ExcelColor": {
        "type": "string",
        "description": "Excel color",
        "enum": [
          "aqua",
          "automatic",
          "black",
          "black1",
          "blue",
          "blue_grey",
          "blue1",
          "bright_green",
          "bright_green1",
          "brown",
          "coral",
          "cornflower_blue",
          "dark_blue",
          "dark_green",
          "dark_red",
          "dark_teal",
          "dark_yellow",
          "gold",
          "green",
          "grey_25_percent",
          "grey_40_percent",
          "grey_50_percent",
          "grey_80_percent",
          "indigo",
          "lavender",
          "lemon_chiffon",
          "light_blue",
          "light_cornflower_blue",
          "light_green",
          "light_orange",
          "light_turquoise",
          "light_turquoise1",
          "light_yellow",
          "lime",
          "maroon",
          "olive_green",
          "orange",
          "orchid",
          "pale_blue",
          "pink",
          "pink1",
          "plum",
          "red",
          "red1",
          "rose",
          "royal_blue",
          "sea_green",
          "sky_blue",
          "tan",
          "teal",
          "turquoise",
          "turquoise1",
          "violet",
          "white",
          "white1",
          "yellow",
          "yellow1"
        ],
        "example": "grey_25_percent"
      },
      "ExcelExport": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "File ID",
            "format": "ObjectId"
          },
          "title": {
            "type": "string",
            "description": "File title"
          },
          "description": {
            "type": "string",
            "description": "File description"
          },
          "entity": {
            "type": "string",
            "description": "File category or type",
            "example": "Invoice export"
          },
          "metadata": {
            "type": "object",
            "description": "File metadata",
            "properties": {
              "registry-id": {
                "type": "string",
                "description": "ID of related register"
              }
            },
            "example": {}
          },
          "sheets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExcelSheet"
            }
          }
        }
      },
      "ExcelExportDone": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "File ID",
            "format": "ObjectId"
          },
          "title": {
            "type": "string",
            "description": "File title"
          },
          "description": {
            "type": "string",
            "description": "File description"
          },
          "entity": {
            "type": "string",
            "description": "File category or type",
            "example": "Invoice export"
          },
          "metadata": {
            "type": "object",
            "description": "File metadata",
            "properties": {
              "registry-id": {
                "type": "string",
                "description": "ID of related register"
              }
            },
            "example": {}
          }
        },
        "required": [
          "id",
          "title",
          "entity",
          "metadata"
        ]
      },
      "ExcelSheet": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Sheet ID",
            "format": "ObjectId"
          },
          "title": {
            "type": "string",
            "description": "Sheet title"
          },
          "rows": {
            "type": "array",
            "description": "Data rows",
            "items": {
              "type": "array",
              "description": "Row of cells",
              "items": {
                "$ref": "#/components/schemas/ExcelCell"
              }
            }
          },
          "col-settings": {
            "type": "array",
            "description": "Column settings",
            "items": {
              "type": "object",
              "properties": {
                "col": {
                  "type": "number",
                  "description": "Col index, zero based",
                  "example": 3
                },
                "width": {
                  "type": "number",
                  "description": "Column width in 1/256 of digit 0, maximum 65280",
                  "example": 800
                }
              }
            }
          },
          "row-settings": {
            "type": "array",
            "description": "Row settings",
            "items": {
              "type": "object",
              "properties": {
                "row": {
                  "type": "number",
                  "description": "Row index, zero based",
                  "example": 5
                },
                "height": {
                  "type": "number",
                  "description": "Row height in 1/20 of a point, or -1 for default height",
                  "example": 200
                }
              }
            }
          },
          "merged-regions": {
            "type": "array",
            "description": "Merged cell regions",
            "items": {
              "type": "object",
              "properties": {
                "first-row": {
                  "type": "number",
                  "description": "Index of first row, zero based",
                  "example": 1
                },
                "last-row": {
                  "type": "number",
                  "description": "Index of last row, zero based",
                  "example": 2
                },
                "first-col": {
                  "type": "number",
                  "description": "Index of first col, zero based",
                  "example": 3
                },
                "last-col": {
                  "type": "number",
                  "description": "Index of last col, zero based",
                  "example": 4
                }
              }
            }
          }
        },
        "required": [
          "title",
          "rows"
        ]
      },
      "Field": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "Human-readable field title"
              },
              "registry-id": {
                "type": "string",
                "format": "ObjectId",
                "description": "Field belongs to this registry"
              },
              "field-id": {
                "type": "string",
                "description": "Reference to Field Type ID"
              },
              "field-type": {
                "type": "string",
                "description": "Field storage type",
                "enum": [
                  "string",
                  "number",
                  "boolean",
                  "text",
                  "address",
                  "materials",
                  "phone",
                  "color",
                  "date",
                  "date-time",
                  "start-end",
                  "breaks",
                  "date-duration",
                  "registry-reference",
                  "field-reference",
                  "article-reference"
                ]
              },
              "field-section": {
                "type": "string",
                "description": "Field section ID",
                "enum": [
                  "generic",
                  "invoice-head",
                  "invoice-section",
                  "invoice-row",
                  "payroll-row",
                  "registers"
                ]
              },
              "weight": {
                "type": "number",
                "description": "Sort order for this field. Lower weight floats on top, higher weight sinks."
              },
              "conditionally-visible": {
                "type": "boolean",
                "description": "If set to true, the field should only be visible under a certain set of conditions. Visibility settings are found in `settings.visibility-options`"
              },
              "required": {
                "type": "boolean",
                "description": "Is this field required?"
              },
              "public": {
                "type": "boolean",
                "description": "Allow everyone to see this field value and also show it in deeply linked presentations.\n"
              },
              "protected": {
                "type": "boolean",
                "description": "Field should only the editable by and visible for managers."
              },
              "readonly": {
                "type": "boolean",
                "description": "Field is read-only"
              },
              "override": {
                "type": "string",
                "description": "This field definition overrides a field with this ID."
              },
              "values": {
                "type": "object",
                "description": "Type specific values",
                "properties": {
                  "default-val": {
                    "description": "Default value for this field, if unset in the instance",
                    "nullable": true
                  }
                }
              },
              "settings": {
                "type": "object",
                "description": "Type specific settings",
                "properties": {
                  "registry-id": {
                    "type": "string",
                    "format": "ObjectId",
                    "description": "ID of referenced registry, in case field-type === \"registry-reference\""
                  },
                  "visibility-options": {
                    "type": "object",
                    "description": "Visibility settings, if conditionally-visible is true",
                    "properties": {
                      "fields": {
                        "type": "array",
                        "description": "Array of fields requiried for visibility",
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string",
                              "description": "Referenced field ID"
                            },
                            "value": {
                              "description": "Field value to match against"
                            },
                            "type": {
                              "type": "string",
                              "description": "Field type",
                              "enum": [
                                "string",
                                "boolean",
                                "registry-reference",
                                "registry-reference_EXCLUDE"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "meta": {
                "type": "object",
                "description": "Arbitary field meta data"
              }
            },
            "required": [
              "title",
              "registry-id",
              "field-id",
              "field-type",
              "weight"
            ]
          }
        ]
      },
      "FieldType": {
        "type": "object",
        "description": "FieldType describes the different interpretations a custom field can have.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique field type ID",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "Field storage type"
          },
          "section": {
            "type": "string",
            "description": "Field section ID"
          },
          "title": {
            "type": "string",
            "description": "Localized field type title"
          },
          "default": {
            "description": "Default value"
          },
          "max-length": {
            "type": "number",
            "description": "Maximum length of value stored in this field"
          }
        },
        "required": [
          "id",
          "type"
        ]
      },
      "HouseWorkCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "ROT"
          },
          "name": {
            "type": "string",
            "example": "Renovation and extension"
          },
          "types": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "MASONRY"
                },
                "name": {
                  "type": "string",
                  "example": "Masonry"
                }
              }
            }
          }
        },
        "required": [
          "id",
          "name",
          "types"
        ]
      },
      "Inquiry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "shift-id": {
                "type": "string",
                "description": "Id of the inquiried shift",
                "format": "ObjectId"
              },
              "shift-vid": {
                "type": "string",
                "description": "Vid of the inquiried shift",
                "format": "ObjectId"
              },
              "status": {
                "type": "string",
                "description": "Status of the Inquiry",
                "enum": [
                  "open",
                  "closed"
                ]
              },
              "response": {
                "type": "string",
                "description": "Inquiry response",
                "enum": [
                  "yes",
                  "no"
                ]
              },
              "response-ts": {
                "type": "integer",
                "description": "Epoch timestamp indicating when response was provided for the inquiry",
                "readOnly": true,
                "example": 1589965908909
              },
              "reason": {
                "type": "string",
                "description": "Reason for declining and inquiry"
              },
              "open-shift-response": {
                "type": "boolean",
                "description": "True if the inquiry was created through an open shift response",
                "readOnly": true
              },
              "seen": {
                "type": "integer",
                "description": "Epoch timestamp that indicdates when the inquiried user first saw the inquiry",
                "example": 1589965922340
              },
              "description": {
                "type": "string",
                "description": "Inquiry description"
              },
              "start": {
                "type": "string",
                "format": "local-date-time",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?$",
                "description": "Start of inquiry without time zone (i.e. 2019-04-30T15:41:00.000)"
              },
              "end": {
                "type": "string",
                "format": "local-date-time",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?$",
                "description": "End of inquiry without time zone (i.e. 2019-04-30T15:41:00.000)"
              },
              "breaks": {
                "type": "array",
                "description": "List of breaks",
                "items": {
                  "$ref": "#/components/schemas/Break"
                }
              },
              "values": {
                "type": "object",
                "description": "Values for custom registry fields (from shift)"
              },
              "user-id": {
                "type": "string",
                "description": "Id of the inquiried user",
                "format": "ObjectId"
              },
              "blocked": {
                "type": "object",
                "properties": {
                  "created": {
                    "type": "integer",
                    "description": "True if the inquiry was created through an open shift response",
                    "example": 1589965922340
                  },
                  "blocked-by": {
                    "type": "string",
                    "description": "Id of the user who blocked the inquiry",
                    "format": "ObjectId"
                  },
                  "reason": {
                    "type": "string",
                    "description": "Reason describing why the inquiry got blocked",
                    "format": "ObjectId"
                  }
                }
              }
            },
            "required": [
              "shift-id",
              "shift-vid",
              "start",
              "end",
              "user-id"
            ]
          }
        ]
      },
      "IntegrationModule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID for the integration"
          },
          "name": {
            "type": "string",
            "description": "Name of the integration"
          },
          "type": {
            "type": "string",
            "description": "Type of integration (salary/invoice)"
          },
          "image": {
            "type": "string",
            "description": "Link to the integration partner logo"
          }
        }
      },
      "InternalMessage": {
        "type": "object",
        "properties": {
          "company-id": {
            "type": "string",
            "format": "ObjectId",
            "description": "Id of the company who owns this item."
          },
          "title": {
            "type": "string",
            "description": "Title of internal message"
          },
          "message": {
            "type": "string",
            "description": "The message"
          },
          "severity": {
            "type": "string",
            "description": "Message status",
            "enum": [
              "warning",
              "info"
            ]
          }
        },
        "required": [
          "title",
          "message",
          "severity"
        ]
      },
      "Invoice": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "start-date": {
                "type": "string",
                "format": "local-date",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
                "description": "First day of invoiced interval.",
                "example": "2018-10-01"
              },
              "end-date": {
                "type": "string",
                "format": "local-date",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
                "description": "Last day of invoiced interval.",
                "example": "2018-10-10"
              },
              "invoice-date": {
                "type": "string",
                "format": "local-date",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
                "description": "The invoice date (date invoice was created, sent or booked).",
                "example": "2018-10-20"
              },
              "due-date": {
                "type": "string",
                "format": "local-date",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
                "description": "Date when invoice is due for payment.",
                "example": "2018-10-23"
              },
              "currency": {
                "type": "string",
                "description": "Currency in ISO 4217 format.",
                "example": "USD"
              },
              "total": {
                "type": "number",
                "description": "Total invoice amount.",
                "example": 1000
              },
              "invoice-text": {
                "type": "string",
                "description": "Longer multi-line message to the invoice receiver.",
                "example": "This is a longer text."
              },
              "order-no": {
                "type": "string",
                "description": "Order number or code.",
                "example": "na1234"
              },
              "invoice-no": {
                "type": "string",
                "description": "Invoice number or code. Upon successful transfer Timezynk sets the invoice-no\nto the invoice number provided by third-party service.\n",
                "example": "kv4321"
              },
              "read-only": {
                "type": "boolean",
                "description": "When read-only is set to true, the invoice can no longer be edited. Only\ncancel and delete action can be performed. Timezynk sets read-only as true\nupon successful transfer to third-party service.\n"
              },
              "canceled": {
                "type": "boolean",
                "description": "True if the invoice is canceled."
              },
              "export-data": {
                "type": "object",
                "description": "Structed invoice head data. Exact content dependent on target invoicing software.\n",
                "properties": {
                  "generic": {
                    "type": "object",
                    "description": "invoice head data applicable to most target systems.",
                    "properties": {
                      "customer-no": {
                        "type": "string",
                        "description": "Customer number or ID.",
                        "example": 3008
                      },
                      "customer-name": {
                        "type": "string",
                        "description": "Customer name.",
                        "example": "Thor"
                      },
                      "your-reference": {
                        "type": "string",
                        "description": "Your reference.",
                        "example": 123
                      },
                      "our-reference": {
                        "type": "string",
                        "description": "Our reference.",
                        "example": 123
                      },
                      "address-1": {
                        "type": "string",
                        "description": "Address line 1.",
                        "example": "Street"
                      },
                      "address-2": {
                        "type": "string",
                        "description": "Address line 2.",
                        "example": "c/o"
                      },
                      "zip-code": {
                        "type": "string",
                        "description": "Address zip code.",
                        "example": 12345
                      },
                      "city": {
                        "type": "string",
                        "description": "Address city.",
                        "example": "Borås"
                      },
                      "country": {
                        "type": "string",
                        "description": "Address country.",
                        "example": "SWE"
                      }
                    }
                  },
                  "custom": {
                    "type": "object",
                    "description": "Context-specific data."
                  }
                }
              }
            },
            "required": [
              "invoice-date",
              "export-data"
            ]
          }
        ]
      },
      "InvoiceArticle": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseArticle"
          },
          {
            "type": "object",
            "properties": {
              "sku": {
                "type": "string",
                "description": "Invoice article SKU (article code)",
                "example": "001-21"
              },
              "discount": {
                "type": "number",
                "description": "Discount in fractions to apply  (0.1 means 10% discount)",
                "example": 0.1
              },
              "house-work": {
                "type": "boolean",
                "description": "Set to true if article is tax-deductible as house work",
                "example": false
              }
            }
          }
        ]
      },
      "InvoiceExport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "invoice-id": {
                "type": "string",
                "description": "Unique shift ID.",
                "format": "ObjectId",
                "example": "5dde7024eded8872705aabcb"
              },
              "target": {
                "type": "string",
                "description": "Target system for export.",
                "example": "eAccounting"
              },
              "target-version": {
                "type": "string",
                "description": "Version of target system."
              },
              "target-invoice-id": {
                "type": "string",
                "description": "Invoice ID assigned by target system.",
                "example": 42
              },
              "state": {
                "type": "string",
                "description": "State of export.",
                "enum": [
                  "pending",
                  "failed",
                  "completed",
                  "download"
                ]
              },
              "error-code": {
                "type": "string",
                "description": "Error code, if state equals \"failed\"."
              },
              "error-message": {
                "type": "string",
                "description": "Error message, if state equals \"failed\"."
              }
            },
            "required": [
              "invoice-id",
              "target",
              "state"
            ]
          }
        ]
      },
      "InvoiceRow": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "invoice-id": {
                "type": "string",
                "description": "Unique shift ID.",
                "format": "ObjectId",
                "example": "5dde7024eded8872705aabde"
              },
              "weight": {
                "type": "number",
                "description": "Lighter rows float to the top of the invoice, heavier rows sink.",
                "example": 1
              },
              "sku": {
                "type": "string",
                "description": "SKU .",
                "example": "1002"
              },
              "description": {
                "type": "string",
                "description": "Item description.",
                "example": "Some text describing the row."
              },
              "count": {
                "type": "number",
                "description": "Count.",
                "example": 8
              },
              "unit": {
                "type": "string",
                "description": "Unit of measurement.",
                "example": "hours"
              },
              "price": {
                "type": "number",
                "description": "Price per item.",
                "example": 8.2
              },
              "currency": {
                "type": "string",
                "description": "Currency in ISO 4217 format, must match invoice head.",
                "example": "USD"
              },
              "discount": {
                "type": "number",
                "description": "Discount, in fraction. 0.05 == 5%.",
                "example": 0.05
              },
              "house-work": {
                "type": "boolean",
                "description": "True if the invoice row concerns tax deductible house work.",
                "example": false
              },
              "duration": {
                "type": "number",
                "description": "Duration in hours of underlying time report. Used for statistics only.\n",
                "example": 2.5
              },
              "report-ids": {
                "type": "array",
                "description": "IDs of underlying time reports that generated this row.",
                "items": {
                  "type": "string",
                  "format": "ObjectId",
                  "example": "5bf6d703571d013b348713cb"
                }
              },
              "export-data": {
                "type": "object",
                "description": "Structed invoice row data. Exact content dependent on target invoicing\nsoftware.\n",
                "properties": {
                  "generic": {
                    "type": "object",
                    "description": "invoice row data applicable to most target systems.",
                    "properties": {
                      "cost-center": {
                        "type": "string",
                        "description": "Cost center for book-keeping this row.",
                        "example": 28
                      },
                      "project-code": {
                        "type": "string",
                        "description": "Project code for book-keeping this row.",
                        "example": "PL/I"
                      }
                    }
                  },
                  "custom": {
                    "type": "object",
                    "description": "Context-specific data."
                  },
                  "raindance": {
                    "type": "object",
                    "properties": {
                      "description-s": {
                        "type": "string"
                      },
                      "kstl-s": {
                        "type": "string"
                      },
                      "vht-s": {
                        "type": "string"
                      },
                      "obj-s": {
                        "type": "string"
                      },
                      "project-s": {
                        "type": "string"
                      },
                      "slag-s": {
                        "type": "string"
                      },
                      "kmp-s": {
                        "type": "string"
                      },
                      "konto-s": {
                        "type": "string"
                      },
                      "description-k": {
                        "type": "string"
                      },
                      "kstl-k": {
                        "type": "string"
                      },
                      "vht-k": {
                        "type": "string"
                      },
                      "obj-k": {
                        "type": "string"
                      },
                      "project-k": {
                        "type": "string"
                      },
                      "slag-k": {
                        "type": "string"
                      },
                      "kmp-k": {
                        "type": "string"
                      },
                      "konto-k": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "required": [
              "invoice-id",
              "weight",
              "export-data"
            ]
          }
        ]
      },
      "JournalEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Type of Journal event",
                "enum": [
                  "order-created",
                  "order-seen",
                  "order-accepted",
                  "order-confirmation-sent",
                  "order-update-bookings",
                  "order-update-shifts",
                  "order-delete-shifts",
                  "order-fully-booked",
                  "order-approval-request-sent",
                  "order-approval-request-approved",
                  "order-approval-request-rejected",
                  "order-booking-confirmation",
                  "order-rejected",
                  "order-discarded",
                  "order-client-discarded",
                  "order-done",
                  "comment",
                  "log-item",
                  "duplicity-change"
                ],
                "example": "comment"
              },
              "target": {
                "type": "string",
                "format": "ObjectId",
                "description": "Target object this journal entry is about",
                "example": "60c8b280a7780aada80cc106"
              },
              "content": {
                "oneOf": [
                  {
                    "type": "array",
                    "description": "Type-dependent content of the journal entry"
                  },
                  {
                    "type": "string",
                    "description": "Type-dependent content of the journal entry",
                    "example": "Comment on data"
                  },
                  {
                    "type": "object",
                    "example": {
                      "text": "Please note schedule changes around midsummer!"
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "LevelEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "set-credit-to": {
                "description": "Force the time credit to this value. Used for positive balances.",
                "type": "number"
              },
              "set-debit-to": {
                "description": "Force the time debit to this value. Used for negative balances.",
                "type": "number"
              },
              "date": {
                "description": "Date",
                "type": "string",
                "format": "ISO Date",
                "example": "2020-04-24"
              },
              "user-id": {
                "description": "User ID",
                "type": "string",
                "format": "ObjectId",
                "example": "5ea2c7964169b4ada9d6c7c8"
              }
            }
          }
        ]
      },
      "LogItem": {
        "type": "object",
        "properties": {
          "log-info": {
            "type": "object",
            "required": [
              "id",
              "type",
              "tstamp",
              "user-id",
              "collection",
              "company-id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "format": "ObjectId",
                "description": "Unique ID for this change"
              },
              "type": {
                "type": "string",
                "description": "Type of change",
                "enum": [
                  "create",
                  "update",
                  "delete"
                ]
              },
              "tstamp": {
                "type": "number",
                "format": "timestamp",
                "description": "Timestamp for this change in milliseconds since the Unix Epoch"
              },
              "user-id": {
                "type": "string",
                "format": "ObjectId",
                "description": "ID of the user who did the change"
              },
              "collection": {
                "type": "string",
                "description": "Name of the collection that contains the changed document"
              },
              "company-id": {
                "type": "string",
                "format": "ObjectId",
                "description": "Company ID that owns the changed document"
              }
            }
          },
          "other": {
            "type": "string",
            "description": "All properties from the created, changed or deleted source document"
          },
          "original": {
            "type": "string",
            "description": "All properties from the created, changed or deleted source document"
          },
          "document": {
            "type": "string",
            "description": "All properties from the created, changed or deleted source document"
          },
          "properties": {
            "type": "string",
            "description": "All properties from the created, changed or deleted source document"
          }
        },
        "required": [
          "log-info"
        ]
      },
      "Order": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseOrder"
          },
          {
            "properties": {
              "message": {
                "type": "string",
                "description": "Message entered by the client when creating the order."
              },
              "client-id": {
                "type": "string",
                "description": "Id of the company owning the request\nShould almost always be set to the current user's company-id.\n",
                "format": "ObjectId"
              },
              "client": {
                "$ref": "#/components/schemas/Client",
                "description": "Name and contact defails of the client owning the request."
              },
              "order-ref-id": {
                "type": "string",
                "description": "Id referncing supplier- and client-orders. Only for internal use.",
                "format": "ObjectId",
                "readOnly": true
              },
              "order-no": {
                "type": "string",
                "description": "The order number.",
                "readOnly": true
              },
              "supplier-id": {
                "type": "string",
                "description": "Id of the company supplying the order.\nWhen creating an order, the `supplier-id` is found in the order form associated with the order to be created.\nFor interal orders set `supplier-id` to the same value as `client-id`\n",
                "format": "ObjectId"
              }
            },
            "required": [
              "form-id",
              "form-vid",
              "client-id",
              "supplier-id",
              "shifts",
              "values",
              "email"
            ]
          }
        ]
      },
      "OrderClient": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "properties": {
              "email": {
                "type": "string",
                "description": "The order client's email."
              },
              "client-company-id": {
                "type": "string",
                "format": "ObjectId",
                "description": "Id representing the client's company-id."
              },
              "supplier-company-id": {
                "type": "string",
                "format": "ObjectId",
                "description": "Id representing a supplier's company-id, if set."
              },
              "client-title": {
                "type": "string",
                "description": "Title of the order client."
              },
              "supplier-title": {
                "type": "string",
                "description": "Title of the order supplier."
              },
              "order-forms": {
                "type": "array",
                "description": "List of order form ids which the client has access to view.",
                "items": {
                  "type": "string",
                  "format": "ObjectId"
                }
              },
              "values": {
                "type": "object",
                "description": "Client specific values which can be inherited into an order if specified in the order form."
              },
              "supplier-code": {
                "type": "string",
                "description": "The supplier code is used to invite new clients. The code can only be used once, and to be able the user as a client, the email is required to match the invited users email."
              }
            }
          }
        ],
        "example": {
          "id": "5dde7024eded8872705aabcd",
          "vid": "5dde7024eded8872705aabce",
          "company-id": "5dde7024eded8872705aabcf",
          "created": 1558604010307,
          "created-by": "5ec23c9eaa389eb6070c3b9f",
          "valid-from": 1558604030403,
          "valid-to": 0,
          "changed-by": "5ec23c9eaa389eb6070c3ba0",
          "archived": null,
          "email": "name@example.com",
          "client-company-id": "5dde7024eded8872705aabd1",
          "supplier-company-id": null,
          "client-title": "Client title",
          "supplier-title": "Supplier title",
          "order-forms": [
            "5dde7024eded8872705a0123"
          ],
          "values": {},
          "supplier-code": "5dde7024eded8872705aabd2"
        }
      },
      "OrderForm": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "properties": {
              "supplier-id": {
                "type": "string",
                "description": "Id of the company supplying the order form.\nShould be used to set `order.supplier-id` when creating a new order.\n",
                "format": "ObjectId",
                "readOnly": true,
                "example": "5dde7024eded8872705aabcf"
              },
              "title": {
                "type": "string",
                "description": "Name of the order form",
                "example": "test form"
              },
              "shift-fields": {
                "type": "array",
                "description": "List of shifts fields related to the order.",
                "items": {
                  "$ref": "#/components/schemas/OrderFormShiftField"
                },
                "example": []
              },
              "fields": {
                "type": "array",
                "description": "List of additional custom fields related to the order.",
                "items": {
                  "$ref": "#/components/schemas/OrderFormCustomField"
                },
                "example": []
              }
            }
          }
        ],
        "required": [
          "title"
        ]
      },
      "OrderFormCustomField": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderFormField"
          },
          {
            "properties": {
              "field-template-id": {
                "type": "string",
                "format": "ObjectId",
                "description": "Id of the registry field type used"
              }
            },
            "required": [
              "field-template-id"
            ]
          }
        ]
      },
      "OrderFormField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier representing a specific custom field",
            "format": "ObjectId",
            "readOnly": true
          },
          "field-type": {
            "type": "string",
            "description": "Field storage type"
          },
          "required": {
            "type": "boolean",
            "description": "Is this field required?"
          },
          "public": {
            "type": "boolean",
            "description": "Allow the client to see this field.\n"
          },
          "protected": {
            "type": "boolean",
            "description": "Field should only the editable by and visible for the supplier."
          },
          "readonly": {
            "type": "boolean",
            "description": "Field is read-only"
          },
          "values": {
            "type": "object",
            "description": "Type specific values"
          },
          "settings": {
            "type": "object",
            "description": "Type specific settings"
          },
          "title": {
            "type": "string",
            "description": "Human-readable field title"
          }
        },
        "required": [
          "title"
        ]
      },
      "OrderFormShiftField": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderFormField"
          },
          {
            "properties": {
              "field-id": {
                "type": "string",
                "format": "ObjectId",
                "description": "Id of the field instance"
              }
            },
            "required": [
              "field-id"
            ]
          }
        ]
      },
      "OrderSupplier": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier representing a specific Supplier. If supplier-company-id is set, that value is returned instead of the object id.",
            "format": "ObjectId",
            "readOnly": true
          },
          "vid": {
            "type": "string",
            "description": "Unique identifier representing a specific version of an item",
            "format": "ObjectId",
            "readOnly": true
          },
          "company-id": {
            "type": "string",
            "format": "ObjectId",
            "description": "Id of the company who owns this item."
          },
          "archived": {
            "type": "integer",
            "description": "Timestamp in milliseconds for when the object was archived, or null if it is still active",
            "nullable": true
          },
          "supplier-company-id": {
            "type": "string",
            "format": "ObjectId",
            "description": "Id representing the supplier's company-id."
          },
          "client-company-id": {
            "type": "string",
            "format": "ObjectId",
            "description": "Id representing a client's company-id, if set."
          },
          "contact-name": {
            "type": "string",
            "description": "The suppliers's contact name."
          },
          "contact-phone": {
            "type": "string",
            "description": "The suppliers's contact phone."
          },
          "contact-email": {
            "type": "string",
            "description": "The suppliers's contact email."
          },
          "supplier-title": {
            "type": "string",
            "description": "Title of the supplier."
          },
          "client-title": {
            "type": "string",
            "description": "Title of the order client."
          },
          "order-forms": {
            "type": "array",
            "description": "List of order form ids which the client has access to view.",
            "items": {
              "type": "string",
              "format": "ObjectId"
            }
          },
          "values": {
            "type": "object",
            "description": "Supplier specific values which can be inherited into an order if specified in the order form."
          },
          "client-code": {
            "type": "string",
            "description": "The client code is used to invite new suppliers. The code can only be used once, and to be able the user as a supplier, the email is required to match the invited users email."
          }
        },
        "example": {
          "id": "5dde7024eded8872705aabcd",
          "vid": "5dde7024eded8872705aabce",
          "company-id": "5dde7024eded8872705aabcf",
          "created": 1558604010307,
          "created-by": "5ec23c9eaa389eb6070c3ba1",
          "valid-from": 1558604030403,
          "changed-by": "5ec23c9eaa389eb6070c3ba2",
          "archived": null,
          "email": "name@example.com",
          "client-company-id": null,
          "supplier-company-id": "5dde7024eded8872705aabd1",
          "contact-name": "Firstname Surname",
          "contact-phone": "0123-12343",
          "contact-email": "name@example.com",
          "client-title": "Client title",
          "supplier-title": "SupplierTitle",
          "order-forms": [
            "5dde7024eded8872705a0123"
          ],
          "values": {},
          "client-code": "5dde7024eded8872705aabd2"
        }
      },
      "OutgoingRfq": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "$ref": "#/components/schemas/Basenrder"
          },
          {
            "properties": {
              "status": {
                "type": "string",
                "description": "Quote shift status.",
                "enum": [
                  "OPEN",
                  "SENT"
                ],
                "default": "OPEN",
                "readOnly": true
              },
              "expires": {
                "type": "number",
                "description": "Timestamp in milliseconds for when the rfq expires."
              },
              "client": {
                "$ref": "#/components/schemas/Client",
                "description": "Name and contact defails of the client owning the request."
              },
              "rfq-no": {
                "type": "string",
                "description": "The RfQ number.",
                "format": "ObjectId",
                "readOnly": true
              },
              "shift-ids": {
                "type": "array",
                "description": "Array of connected shifts. (Intended for internal use.)",
                "items": {
                  "type": "string",
                  "format": "ObjectId"
                }
              },
              "duplicity": {
                "type": "number",
                "description": "Amount of people to be booked for the this rfq.",
                "readOnly": true
              },
              "booked-duplicity": {
                "type": "number",
                "description": "Amount of people currently confirmed on the rfq.",
                "readOnly": true
              }
            }
          }
        ],
        "example": {
          "id": "5dde7024eded8872705a0001",
          "vid": "5dde71e4c9e77c0001730001",
          "company-id": "5dde6e21c9e77c0001a1e3a7",
          "created": 1574858788,
          "created-by": "5dde6e21c9e77c0001a1e3b0",
          "valid-from": 1574859236203,
          "valid-to": 0,
          "changed-by": "5dde6e21c9e77c0001a1e3b0",
          "archived": 0,
          "status": "OPEN",
          "form-id": "5dde7024eded8872705a1ff7",
          "form-vid": "5dde71e4c9e77c000173dd03",
          "booked-duplicity": 1,
          "duplicity": 2,
          "original-duplicity": 3,
          "values": {},
          "shift-dates": [
            "2019-11-29",
            "2019-11-30",
            "2019-11-28"
          ],
          "expires": 1558604010307,
          "client": {
            "phone": "0123-405060",
            "email": "name@company.com",
            "company": "Company AB",
            "name": "Firstname Surname"
          },
          "rfq-no": "13",
          "shift-ids": [
            "5dde6e21c9e77c0001a1e3b3",
            "5dde6e21c9e77c0001a1e3b4"
          ]
        }
      },
      "PaymentTransaction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Type of transaction",
                "enum": [
                  "invoice"
                ]
              },
              "target": {
                "type": "string",
                "description": "Transaction target"
              },
              "amount": {
                "type": "object",
                "description": "Amount charged",
                "properties": {
                  "value": {
                    "type": "integer",
                    "description": "Amount charged (of specified currency)."
                  },
                  "currency": {
                    "type": "string",
                    "description": "Currency code."
                  }
                }
              },
              "status": {
                "type": "string",
                "description": "Payment status of the transaction",
                "enum": [
                  "SETTLED",
                  "FAILED"
                ],
                "example": "FAILED"
              },
              "result-code": {
                "type": "string",
                "description": "Result code from Adyen [POST /payments request](https://docs.adyen.com/api-explorer/#/CheckoutService/v67/post/payments). [Result code glossary](https://docs.adyen.com/online-payments/payment-result-codes).",
                "example": "Authorised"
              },
              "refusal-code-reason": {
                "type": "string",
                "description": "Refusal code reason. Included for failed transactions. [Refusal code reason glossary](https://docs.adyen.com/development-resources/refusal-reasons).",
                "example": "Expired Card"
              }
            }
          }
        ]
      },
      "PermissionsObject": {
        "type": "object",
        "properties": {
          "schedule": {
            "type": "string",
            "format": "CombinationID",
            "description": "Tag combination required for being scheduled. See User/combinations."
          },
          "report": {
            "type": "string",
            "format": "CombinationID",
            "description": "Tag combination required for creating independent time reports. See User/combinations."
          }
        }
      },
      "Preference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Setting ID"
          },
          "value": {
            "type": "object",
            "description": "Value can be anything, both primitive types and arrays and objects."
          }
        },
        "required": [
          "id"
        ]
      },
      "QuoteShift": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "$ref": "#/components/schemas/BaseShift"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Quote shift status",
                "enum": [
                  "DRAFT",
                  "SENT"
                ],
                "default": "DRAFT",
                "readOnly": true
              },
              "client-id": {
                "type": "string",
                "description": "Id of the company owning the RfQ.\n",
                "format": "ObjectId"
              },
              "outgoing-rfq-id": {
                "type": "string",
                "description": "Id of the rfq parent this rfq was created from.\n",
                "format": "ObjectId"
              },
              "incoming-rfq-id": {
                "type": "string",
                "description": "Id of the RfQ.\n",
                "format": "ObjectId"
              },
              "rfq-shift-id": {
                "type": "string",
                "format": "ObjectId",
                "description": "The corresponding shift-id from the RfQ."
              },
              "booked-users": {
                "type": "array",
                "description": "A list containing exactly one user id.",
                "items": {
                  "type": "string",
                  "format": "ObjectId"
                }
              },
              "booked-user": {
                "type": "object",
                "description": "Suggested user for this shift",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of worker"
                  },
                  "id-no": {
                    "type": "string",
                    "description": "National identification number (personnummer) of the worker"
                  }
                },
                "required": [
                  "name",
                  "id-no"
                ]
              }
            },
            "required": [
              "rfq-shift-id",
              "booked-users",
              "booked-user",
              "outgoing-rfq-id",
              "incoming-rfq-id"
            ]
          }
        ],
        "example": {
          "id": "5dde7024eded8872705a0000",
          "vid": "5dde71e4c9e77c0001730000",
          "company-id": "5dde6e21c9e77c0001a1e3a7",
          "created": 1574858788000,
          "created-by": "5dde6e21c9e77c0001a1e3b0",
          "valid-from": 1574859236203,
          "valid-to": 0,
          "changed-by": "5dde6e21c9e77c0001a1e3b0",
          "archived": 0,
          "start": "2019-04-30T15:00:00.000",
          "end": "2019-04-30T17:00:00.000",
          "breaks": [
            {
              "start": "2019-04-30T16:00:00.000",
              "stop": "2019-04-30T16:15:00.000"
            }
          ],
          "values": {},
          "group-id": "",
          "status": "DRAFT",
          "client-id": "5dde6e21c9e77c0001a1e3a7",
          "outgoing-rfq-id": "5dde7024eded8872705a0001",
          "incoming-rfq-id": "5dde7024eded8872705a0002",
          "rfq-shift-id": "5dde7024eded8872705a0011",
          "booked-users": [
            "5dde7024eded8872705a0012"
          ],
          "booked-user": {
            "name": "Firstname Surname",
            "id-no": "851103-1234"
          }
        }
      },
      "QuoteShiftsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Quote shifts state",
                "enum": [
                  "ACCEPTED",
                  "REJECTED",
                  "CONFIRMED",
                  "REFUSED"
                ]
              },
              "supplier-id": {
                "type": "string",
                "description": "Id of the company owning the quote shifts.\n",
                "format": "ObjectId"
              },
              "quote-shift-ids": {
                "type": "array",
                "description": "List of quote shift ids.",
                "items": {
                  "type": "string",
                  "format": "ObjectId"
                }
              },
              "outgoing-rfq-id": {
                "type": "string",
                "description": "Id of the rfq parent this rfq was created from.\n",
                "format": "ObjectId"
              },
              "incoming-rfq-id": {
                "type": "string",
                "description": "Id of the RfQ.\n",
                "format": "ObjectId"
              }
            },
            "required": [
              "status",
              "supplier-id",
              "quote-shift-ids",
              "outgoing-rfq-id",
              "incoming-rfq-id"
            ]
          }
        ],
        "example": {
          "id": "5dde7024eded8872705a0000",
          "vid": "5dde71e4c9e77c0001730000",
          "company-id": "5dde6e21c9e77c0001a1e3a7",
          "created": 1574858788000,
          "created-by": "5dde6e21c9e77c0001a1e3b0",
          "valid-from": 1574859236203,
          "valid-to": 0,
          "changed-by": "5dde6e21c9e77c0001a1e3b0",
          "archived": 0,
          "status": "ACCEPTED",
          "supplier-id": "5dde6e21c9e77c0001a1e3a7",
          "quote-shift-ids": [
            "5dde7024eded8872705a0011"
          ],
          "outgoing-rfq-id": "5dde7024eded8872705a0001",
          "incoming-rfq-id": "5dde7024eded8872705a0002"
        }
      },
      "Registry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "Localized registry title"
              },
              "description": {
                "type": "string",
                "description": "Human-readable registry description"
              },
              "icon": {
                "type": "string",
                "description": "Icon name"
              },
              "read-only": {
                "type": "boolean",
                "description": "Mark this registry as read-only, to prevent changes from the front-end"
              }
            },
            "required": [
              "title"
            ]
          }
        ]
      },
      "RegistryData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "Human-readable title"
              },
              "registry-id": {
                "type": "string",
                "format": "ObjectId",
                "description": "Data belongs to this registry"
              },
              "permissions": {
                "$ref": "#/components/schemas/PermissionsObject"
              },
              "blocked-users": {
                "type": "array",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/BlockedUser"
                }
              },
              "values": {
                "type": "object",
                "description": "Values for custom fields"
              }
            },
            "required": [
              "title",
              "registry-id"
            ]
          }
        ]
      },
      "RegistryTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Template name"
          },
          "description": {
            "type": "string",
            "description": "Template description text"
          },
          "image": {
            "type": "string",
            "description": "Link to the template image"
          }
        }
      },
      "Rfq": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "$ref": "#/components/schemas/BaseOrder"
          },
          {
            "$ref": "#/components/schemas/OutgoingRfq"
          },
          {
            "properties": {
              "client-id": {
                "type": "string",
                "description": "Id of the company owning the RfQ.\n",
                "format": "ObjectId"
              },
              "outgoing-rfq-id": {
                "type": "string",
                "description": "Id of the rfq parent this rfq was created from.\n",
                "format": "ObjectId"
              }
            },
            "required": [
              "form-id",
              "form-vid",
              "outgoing-rfq-id",
              "client-id",
              "values"
            ]
          }
        ],
        "example": {
          "id": "5dde7024eded8872705a0002",
          "vid": "5dde71e4c9e77c0001730002",
          "company-id": "5dde6e21c9e77c0001a1e3a7",
          "created": 1574858788000,
          "created-by": "5dde6e21c9e77c0001a1e3b0",
          "valid-from": 1574859236203,
          "valid-to": 0,
          "changed-by": "5dde6e21c9e77c0001a1e3b0",
          "form-id": "5dde7024eded8872705a1ff7",
          "form-vid": "5dde71e4c9e77c000173dd03",
          "original-duplicity": 3,
          "values": {},
          "shift-dates": [
            "2019-11-29",
            "2019-11-30",
            "2019-11-28"
          ],
          "expires": 1233545,
          "client": {
            "phone": "0123-405060",
            "email": "name@company.com",
            "company": "Company AB",
            "name": "Firstname Surname"
          },
          "rfq-no": "13",
          "client-id": "5dde7024eded8872705a0017",
          "outgoing-rfq-id": "5dde7024eded8872705a0001"
        }
      },
      "RfqForm": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "properties": {
              "supplier-id": {
                "type": "string",
                "description": "Id of the company supplying the form.\n",
                "format": "ObjectId",
                "readOnly": true,
                "example": "5dde7024eded8872705aabcf"
              },
              "title": {
                "type": "string",
                "description": "Name of the form.",
                "example": "test form"
              },
              "shift-fields": {
                "type": "array",
                "description": "List of shifts fields related to the form.",
                "items": {
                  "$ref": "#/components/schemas/RfqFormShiftField"
                },
                "example": []
              },
              "fields": {
                "type": "array",
                "description": "List of additional custom fields related to the form.",
                "items": {
                  "$ref": "#/components/schemas/RfqFormCustomField"
                },
                "example": []
              },
              "terms": {
                "type": "string",
                "description": "legal terms shown when confirming a quote.",
                "example": "I hereby confirm that I understand the terms of this order and that it is binding.Any changes must be confirmed by both parties. "
              }
            }
          }
        ],
        "required": [
          "title"
        ]
      },
      "RfqFormCustomField": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RfqFormField"
          },
          {
            "properties": {
              "field-template-id": {
                "type": "string",
                "format": "ObjectId",
                "description": "Id of the registry field type used"
              }
            }
          }
        ],
        "required": [
          "field-template-id"
        ]
      },
      "RfqFormField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier representing a specific custom field",
            "format": "ObjectId",
            "readOnly": true
          },
          "field-type": {
            "type": "string",
            "description": "Field storage type"
          },
          "required": {
            "type": "boolean",
            "description": "Is this field required?"
          },
          "public": {
            "type": "boolean",
            "description": "Allow the client to see this field.\n"
          },
          "protected": {
            "type": "boolean",
            "description": "Field should only the editable by and visible for the supplier."
          },
          "readonly": {
            "type": "boolean",
            "description": "Field is read-only"
          },
          "values": {
            "type": "object",
            "description": "Type specific values"
          },
          "settings": {
            "type": "object",
            "description": "Type specific settings"
          },
          "title": {
            "type": "string",
            "description": "Human-readable field title"
          }
        },
        "required": [
          "title"
        ]
      },
      "RfqFormShiftField": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RfqFormField"
          },
          {
            "properties": {
              "field-id": {
                "type": "string",
                "format": "ObjectId",
                "description": "Id of the field instance"
              }
            }
          }
        ],
        "required": [
          "field-id"
        ]
      },
      "RfqShift": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "$ref": "#/components/schemas/BaseShift"
          },
          {
            "type": "object",
            "properties": {
              "duplicity": {
                "type": "number",
                "description": "Maximum (and desired) number of booked users",
                "default": 1
              },
              "accepted-quote-shifts": {
                "type": "array",
                "description": "List of accepted quote shifts for this RfQ shift",
                "readOnly": true,
                "items": {
                  "type": "string",
                  "format": "ObjectId"
                }
              },
              "confirmed-quote-shifts": {
                "type": "array",
                "description": "List of confirmed quote shifts for this RfQ shift",
                "readOnly": true,
                "items": {
                  "type": "string",
                  "format": "ObjectId"
                }
              },
              "shift-id": {
                "type": "string",
                "format": "ObjectId",
                "description": "The corresponding shift-id from which this RfQshift was created."
              },
              "outgoing-rfq-id": {
                "type": "string",
                "format": "ObjectId",
                "description": "ID of order that created the shift"
              },
              "status": {
                "type": "string",
                "description": "Status of the rfq:\n * `active` - Part of a RFQ\n * `removed` - Shift got removed form RFQ\n",
                "default": "active",
                "example": "active",
                "enum": [
                  "active",
                  "removed"
                ]
              }
            },
            "required": [
              "outgoing-rfq-id",
              "shift-id",
              "start",
              "end"
            ]
          }
        ],
        "example": {
          "id": "5dde7024eded8872705a0000",
          "vid": "5dde71e4c9e77c0001730000",
          "company-id": "5dde6e21c9e77c0001a1e3a7",
          "created": 1574858788000,
          "created-by": "5dde6e21c9e77c0001a1e3b0",
          "valid-from": 1574859236203,
          "valid-to": 0,
          "changed-by": "5dde6e21c9e77c0001a1e3b0",
          "archived": 0,
          "start": "2019-04-30T15:00:00.000",
          "end": "2019-04-30T17:00:00.000",
          "breaks": [
            {
              "start": "2019-04-30T16:00:00.000",
              "stop": "2019-04-30T16:15:00.000"
            }
          ],
          "values": {},
          "group-id": "",
          "duplicity": 4,
          "accepted-quote-shifts": [
            "5dde7024eded8872705a0012",
            "5dde7024eded8872705a0013"
          ],
          "confirmed-quote-shifts": [
            "5dde7024eded8872705a0014"
          ],
          "shift-id": "5dde7024eded8872705a0012",
          "outgoing-rfq-id": "5dde7024eded8872705a0013"
        }
      },
      "RfqSupplier": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "properties": {
              "email": {
                "type": "string",
                "description": "The rfq supplier's email."
              },
              "client-company-id": {
                "type": "string",
                "format": "ObjectId",
                "description": "Id representing the supplier's company-id."
              },
              "supplier-company-id": {
                "type": "string",
                "format": "ObjectId",
                "description": "Id representing a client's company-id, if set."
              },
              "client-title": {
                "type": "string",
                "description": "Title of the rfq supplier."
              },
              "supplier-title": {
                "type": "string",
                "description": "Title of the rfq client."
              },
              "rfq-forms": {
                "type": "array",
                "description": "List of rfq form ids which the supplier has access to view.",
                "items": {
                  "type": "string",
                  "format": "ObjectId"
                }
              },
              "values": {
                "type": "object",
                "description": "Supplier specific values which can be inherited into an rfq if specified in the rfq form."
              },
              "client-code": {
                "type": "string",
                "description": "The client code is used to invite new suppliers. The code can only be used once, and to be able the user as a supplier, the email is required to match the invited users email."
              }
            }
          }
        ],
        "example": {
          "id": "5dde7024eded8872705aabcd",
          "vid": "5dde7024eded8872705aabce",
          "company-id": "5dde7024eded8872705aabcf",
          "created": 1558604010307,
          "created-by": "5ec23c9eaa389eb6070c3b9f",
          "valid-from": 1558604030403,
          "valid-to": 0,
          "changed-by": "5ec23c9eaa389eb6070c3ba0",
          "archived": null,
          "email": "name@example.com",
          "client-company-id": "5dde7024eded8872705aabd1",
          "supplier-company-id": null,
          "client-title": "Client title",
          "supplier-title": "Supplier title",
          "rfq-forms": [
            "5dde7024eded8872705a0123"
          ],
          "values": {},
          "client-code": "5dde7024eded8872705aabd2"
        }
      },
      "Role": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "Role's title.\n",
                "example": "supervisor+"
              },
              "description": {
                "type": "string",
                "description": "Role's description.\n",
                "example": "Supervisor with extra permissions"
              },
              "abilities": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Ability"
                }
              },
              "extensions": {
                "type": "object",
                "properties": {
                  "tzcontrol": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Ability"
                    }
                  },
                  "tzmobile": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Ability"
                    }
                  }
                }
              }
            },
            "required": [
              "title",
              "abilities"
            ]
          }
        ]
      },
      "SalaryArticle": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseArticle"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Salary article code",
                "example": "OB1"
              },
              "average-cost": {
                "type": "number",
                "description": "Average cost in article currency",
                "example": 12.5
              }
            }
          }
        ]
      },
      "Shift": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseShift"
          },
          {
            "type": "object",
            "properties": {
              "duplicity": {
                "type": "number",
                "description": "Maximum (and desired) number of booked users",
                "default": 1
              },
              "withhold": {
                "type": "boolean",
                "description": "Hide shift from users making it visible for managers only",
                "readOnly": true
              },
              "order-id": {
                "type": "string",
                "format": "ObjectId",
                "description": "ID of order that created the shift",
                "readOnly": true
              },
              "booked-users": {
                "type": "array",
                "description": "List of booked users",
                "readOnly": true,
                "items": {
                  "type": "string",
                  "format": "ObjectId"
                }
              },
              "booked": {
                "type": "number",
                "readOnly": true,
                "description": "Number of booked users"
              },
              "status": {
                "type": "string",
                "description": "Shift status",
                "enum": [
                  "active",
                  "inactive",
                  "duplicate",
                  "order-outgoing"
                ],
                "default": "active",
                "readOnly": true
              },
              "group-id": {
                "type": "string",
                "nullable": true,
                "format": "ObjectId",
                "description": "Common group ID for grouping several shifts together",
                "example": null
              },
              "mirror-shift-id": {
                "type": "string",
                "format": "ObjectId",
                "description": "The corresponding shift-id for the client or supplier when this shift is part of an order",
                "readOnly": true
              },
              "relations": {
                "type": "object",
                "description": "References to other objects.",
                "nullable": true,
                "properties": {
                  "outgoing-rfq-id": {
                    "type": "string",
                    "format": "ObjectId",
                    "nullable": true,
                    "example": "5dde7024eded8872705aabcf"
                  },
                  "incoming-rfq-id": {
                    "type": "string",
                    "format": "ObjectId",
                    "nullable": true,
                    "example": "5dde7024eded8872705aabd0"
                  },
                  "rfq-quote-shift-response-id": {
                    "type": "string",
                    "format": "ObjectId",
                    "nullable": true,
                    "example": "5dde7024eded8872705aabd1"
                  }
                }
              }
            },
            "required": [
              "start",
              "end"
            ]
          }
        ]
      },
      "ShiftBookingRequest": {
        "type": "object",
        "properties": {
          "shift-selector": {
            "type": "object",
            "properties": {
              "ids": {
                "type": "array",
                "description": "Shift IDs",
                "items": {
                  "type": "string",
                  "format": "ObjectId"
                }
              },
              "interval": {
                "$ref": "#/components/schemas/DateSelector"
              },
              "rolling-id": {
                "type": "string",
                "format": "ObjectId"
              },
              "rolling-shift-id": {
                "type": "string",
                "format": "ObjectId"
              }
            }
          },
          "not-booked-user-ids": {
            "type": "array",
            "description": "User IDs that should not be booked on these shifts, use \"*\" to unbook everyone",
            "items": {
              "type": "string",
              "format": "ObjectId"
            }
          },
          "booked-user-ids": {
            "type": "array",
            "description": "User IDs that should be booked on these shift, sorted in the order they should be booked",
            "items": {
              "type": "string",
              "format": "ObjectId"
            }
          },
          "conflict-policy": {
            "type": "string",
            "description": "How to proceed if a user is already booked on an overlapping shift.",
            "enum": [
              "skip",
              "move",
              "double-book"
            ],
            "default": "skip"
          }
        },
        "required": [
          "shift-selector"
        ]
      },
      "ShiftBookingResponse": {
        "type": "object",
        "properties": {
          "updated-shifts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shift"
            }
          },
          "unresolved-conflicts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "user-id": {
                  "type": "string",
                  "format": "ObjectId"
                },
                "requested-shift-id": {
                  "type": "string",
                  "format": "ObjectId"
                },
                "conflict-shift-ids": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "ObjectId"
                  }
                }
              }
            }
          }
        }
      },
      "ShiftExchange": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "sender-id": {
                "type": "string",
                "format": "ObjectId",
                "description": "ID of exchange request sender.",
                "example": "5dde7024eded8872705aabd2"
              },
              "sender-shift-id": {
                "type": "string",
                "format": "ObjectId",
                "description": "Shift to be changed out.",
                "example": "5dde7024eded8872705aabd3"
              },
              "sender-shift-start": {
                "type": "string",
                "format": "date",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
                "description": "Start date of shift, collected from the object.",
                "readOnly": true,
                "example": "2016-01-10"
              },
              "recipient-id": {
                "type": "string",
                "format": "ObjectId",
                "description": "ID of exchange request recipient.",
                "example": "5dde7024eded8872705aabd4"
              },
              "recipient-shift-id": {
                "type": "string",
                "format": "ObjectId",
                "description": "Shift belonging to recipient, to be changed in.",
                "example": "5dde7024eded8872705aabd5"
              },
              "sender-shift-end": {
                "type": "string",
                "format": "date",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
                "description": "End date of shift, collected from the object.",
                "readOnly": true,
                "example": "2016-01-10"
              },
              "status": {
                "type": "string",
                "description": "Echange status.",
                "enum": [
                  "SENT",
                  "ACCEPTED",
                  "APPROVED",
                  "REJECTED",
                  "EXPIRED",
                  "CLOSED"
                ],
                "default": "SENT",
                "readOnly": true
              },
              "expires": {
                "type": "number",
                "format": "timestamp",
                "description": "Timestamp in milliseconds when the shift exchange expires",
                "example": 1558604030403
              },
              "comment": {
                "type": "string",
                "nullable": true,
                "description": "Comments.",
                "example": "Rejection reasons."
              }
            },
            "required": [
              "sender-id",
              "sender-shift-id",
              "recipient-id",
              "recipient-shift-id"
            ]
          }
        ]
      },
      "ShiftPublishRequest": {
        "type": "object",
        "properties": {
          "shift-selector": {
            "type": "object",
            "description": "Shifts matching selector will be ensured to be published.",
            "properties": {
              "ids": {
                "type": "array",
                "description": "Shift IDs",
                "items": {
                  "type": "string",
                  "format": "ObjectId"
                }
              },
              "interval": {
                "$ref": "#/components/schemas/DateSelector"
              },
              "rolling-id": {
                "type": "string",
                "format": "ObjectId"
              },
              "rolling-shift-id": {
                "type": "string",
                "format": "ObjectId"
              }
            }
          }
        }
      },
      "ShiftPublishResponse": {
        "type": "object",
        "properties": {
          "updated-shifts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shift"
            }
          }
        }
      },
      "ShiftUnpublishRequest": {
        "type": "object",
        "properties": {
          "shift-selector": {
            "type": "object",
            "description": "Shifts matching selector will be ensured to be unpublished.",
            "properties": {
              "ids": {
                "type": "array",
                "description": "Shift IDs",
                "items": {
                  "type": "string",
                  "format": "ObjectId"
                }
              },
              "interval": {
                "$ref": "#/components/schemas/DateSelector"
              },
              "rolling-id": {
                "type": "string",
                "format": "ObjectId"
              },
              "rolling-shift-id": {
                "type": "string",
                "format": "ObjectId"
              }
            }
          }
        }
      },
      "Subscriptions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "start-date": {
                "type": "string",
                "description": "Start of the subscription",
                "example": "2020-12-03",
                "readOnly": true
              },
              "end-date": {
                "type": "string",
                "description": "End of the subscription",
                "example": "2021-12-31",
                "readOnly": true
              },
              "title": {
                "type": "string",
                "description": "Subscription title",
                "example": "Subscription 2021",
                "readOnly": true
              },
              "price-month": {
                "type": "number",
                "format": "float",
                "description": "Montly base fee",
                "readOnly": true
              },
              "price-user-month": {
                "type": "number",
                "format": "float",
                "description": "Maximum montly cost per user",
                "readOnly": true
              },
              "price-user-day": {
                "type": "number",
                "format": "float",
                "description": "Maximum daily cost per scheduled user",
                "readOnly": true
              },
              "price-user-rfq": {
                "type": "number",
                "format": "float",
                "description": "Price per booked user on a RFQ shift",
                "readOnly": true
              },
              "currency": {
                "type": "string",
                "description": "Subscription currency",
                "example": "SEK",
                "readOnly": true
              },
              "currency-rate": {
                "type": "string",
                "description": "Subscription currency rate",
                "example": 1.1,
                "readOnly": true
              },
              "fixed-users": {
                "type": "number",
                "format": "float",
                "example": 100,
                "readOnly": true
              },
              "fixed-price": {
                "type": "number",
                "format": "float",
                "example": 200,
                "readOnly": true
              },
              "fixed-prepaid-months": {
                "type": "number",
                "format": "float",
                "example": 13000,
                "readOnly": true
              },
              "account": {
                "type": "string",
                "readOnly": true
              },
              "discount-code": {
                "type": "string",
                "description": "Discount code used when activating subscription",
                "example": "TIMEZYNK2021",
                "readOnly": true
              }
            },
            "required": [
              "start-date",
              "title"
            ]
          }
        ]
      },
      "Timereport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "start": {
                "type": "string",
                "format": "local-date-time",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?$",
                "description": "Start of time report without time zone (i.e. 2019-04-30T15:41:00.000)"
              },
              "end": {
                "type": "string",
                "format": "local-date-time",
                "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?$",
                "description": "End of time report without time zone (i.e. 2019-04-30T15:41:00.000)"
              },
              "breaks": {
                "type": "array",
                "description": "List of breaks",
                "items": {
                  "$ref": "#/components/schemas/Break"
                }
              },
              "user-id": {
                "type": "string",
                "description": "User ID",
                "format": "ObjectId"
              },
              "shift-id": {
                "type": "string",
                "description": "Reported against shift with this id.",
                "format": "ObjectId"
              },
              "values": {
                "type": "object",
                "description": "Values for custom registry fields"
              }
            },
            "required": [
              "start",
              "end",
              "user-id"
            ]
          }
        ]
      },
      "TokenInfo": {
        "type": "object",
        "properties": {
          "user-id": {
            "type": "string",
            "description": "ID of currently logged in user"
          },
          "role": {
            "type": "string",
            "description": "Role of currently logged in user"
          },
          "permissions": {
            "type": "string",
            "description": "Active set of permissions"
          },
          "modules": {
            "type": "string",
            "description": "Enabled Timezynk modules"
          },
          "company-id": {
            "type": "string",
            "description": "ID of current company"
          },
          "created": {
            "type": "number",
            "description": "Timestamp in milliseconds for when the token was created"
          },
          "expires": {
            "type": "number",
            "description": "Timestamp in milliseconds for when the token will expire"
          },
          "issued-by": {
            "type": "string",
            "description": "ID if issuing server"
          },
          "audience": {
            "type": "string",
            "description": "ID of intended audience for the token"
          }
        }
      },
      "TransactionsPaymentRequestBody": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of transaction",
            "enum": [
              "invoice"
            ]
          },
          "target": {
            "type": "string",
            "description": "Specify the target of this transaction. E.g. if the `type` is `invoice`, then the `target` should be set to the invoice of the id."
          },
          "company-id": {
            "type": "string",
            "description": "Id of the company this transactions is recorded for. If the request is made on behalf of a user, then the company id of the current session will be used."
          },
          "amount": {
            "type": "object",
            "description": "Amount the be charged.",
            "properties": {
              "value": {
                "type": "integer",
                "description": "Amount to charge (of specified currency)."
              },
              "currency": {
                "type": "string",
                "description": "Currency code."
              }
            }
          }
        },
        "required": [
          "amount",
          "type",
          "target",
          "company-id"
        ]
      },
      "User": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "description": "Unique username used for logging in"
              },
              "role": {
                "type": "string",
                "description": "The role for this user"
              },
              "email": {
                "type": "string",
                "description": "User email address",
                "format": "email"
              },
              "employee-no": {
                "type": "string",
                "description": "User employee number"
              },
              "id-no": {
                "type": "string",
                "description": "Users [National Indentification Number](https://en.wikipedia.org/wiki/National_identification_number)\n"
              },
              "bank-account": {
                "type": "string",
                "description": "Users bank account for salary payments"
              },
              "department": {
                "type": "string",
                "description": "department"
              },
              "company": {
                "type": "string",
                "description": "company for salary export"
              },
              "country-code": {
                "type": "number",
                "description": "country code for mobile number"
              },
              "mobile": {
                "type": "string",
                "description": "mobile number"
              },
              "work-phone": {
                "type": "string",
                "description": "work phone number"
              },
              "home-phone": {
                "type": "string",
                "description": "home phone number"
              },
              "lang": {
                "type": "string",
                "description": "users preferred language (en,sv,da or nb currently supported)"
              },
              "address": {
                "type": "string",
                "description": "users street address"
              },
              "address2": {
                "type": "string",
                "description": "users second address line"
              },
              "zip": {
                "type": "string",
                "description": "users zip code"
              },
              "city": {
                "type": "string",
                "description": "users city"
              },
              "country": {
                "type": "string",
                "description": "users country code"
              },
              "int-mobile": {
                "type": "string",
                "readOnly": true,
                "description": "users full mobile with country code applied"
              },
              "relative-name": {
                "type": "string",
                "description": "name of relative"
              },
              "relative-phone": {
                "type": "string",
                "description": "phone number of relative"
              },
              "notes": {
                "type": "string",
                "description": "notes for this user"
              },
              "start": {
                "type": "string",
                "format": "date",
                "description": "start date for users employment"
              },
              "end": {
                "type": "string",
                "format": "date",
                "description": "end date for users employment"
              },
              "permissions": {
                "type": "array",
                "description": "List of tags",
                "items": {
                  "type": "string"
                }
              },
              "combinations": {
                "type": "array",
                "description": "List of users tag combinations",
                "readOnly": true,
                "items": {
                  "type": "string"
                }
              },
              "values": {
                "type": "object",
                "description": "Values for custom registry fields"
              },
              "last-login": {
                "type": "number",
                "description": "last login timestamp (milliseconds since unix epoch)"
              },
              "last-access": {
                "type": "number",
                "description": "last access timestamp (milliseconds since unix epoch)"
              },
              "first-login": {
                "type": "number",
                "description": "first login timestamp (milliseconds since unix epoch)"
              }
            },
            "required": [
              "username",
              "role",
              "email"
            ]
          }
        ]
      },
      "UserInfo": {
        "type": "object",
        "properties": {
          "sub": {
            "type": "string",
            "description": "User ID"
          },
          "name": {
            "type": "string",
            "description": "Full name"
          },
          "email": {
            "type": "string",
            "description": "User email",
            "format": "email"
          },
          "email_verified": {
            "type": "boolean",
            "description": "Is email email verified"
          },
          "locale": {
            "type": "string",
            "description": "User preferred language"
          },
          "phone_number": {
            "type": "string",
            "description": "Full user phone number with international prefix"
          },
          "updated_at": {
            "type": "integer",
            "description": "Timestamp in seconds for when the user was last changed"
          },
          "picture": {
            "type": "string",
            "description": "URL to users profile picture"
          }
        }
      },
      "WorkHoursTemplate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicObject"
          },
          {
            "properties": {
              "title": {
                "type": "string",
                "description": "Template title.",
                "example": "Template Title"
              },
              "fulltime-hours": {
                "type": "integer",
                "description": "Hours in a fulltime work week.",
                "example": 40
              },
              "works-special-dates": {
                "type": "boolean",
                "description": "Can work on e.g. holidays.",
                "example": false
              },
              "rows": {
                "type": "array",
                "description": "List of shifts.",
                "items": {
                  "type": "object",
                  "description": "Shift.",
                  "properties": {
                    "start": {
                      "type": "string",
                      "format": "local-date-time",
                      "description": "Starting date and time of shift.",
                      "example": "2020-04-24T10:00:00"
                    },
                    "end": {
                      "type": "string",
                      "format": "local-date-time",
                      "description": "Ending date and time of shift.",
                      "example": "2020-04-24T18:00:00"
                    },
                    "breaks": {
                      "type": "array",
                      "description": "List of breaks.",
                      "items": {
                        "type": "object",
                        "description": "Break.",
                        "properties": {
                          "start": {
                            "type": "string",
                            "format": "local-date-time",
                            "description": "Starting date and time of break.",
                            "example": "2020-04-24T12:00:00"
                          },
                          "end": {
                            "type": "string",
                            "format": "local-date-time",
                            "description": "Ending date and time of break.",
                            "example": "2020-04-24T13:00:00"
                          }
                        },
                        "required": [
                          "start",
                          "end"
                        ]
                      }
                    }
                  },
                  "required": [
                    "start",
                    "end"
                  ]
                }
              }
            }
          },
          {
            "required": [
              "title",
              "fulltime-hours",
              "works-special-dates",
              "rows"
            ]
          }
        ]
      }
    },
    "parameters": {
      "criteriaParam": {
        "in": "query",
        "name": "interval[match]",
        "description": "Define how to match the interval",
        "schema": {
          "type": "string",
          "enum": [
            "intersects",
            "start-in"
          ],
          "default": "start-in",
          "example": "start-in"
        }
      },
      "endParam": {
        "in": "query",
        "name": "interval[end]",
        "description": "End of matching interval",
        "required": true,
        "schema": {
          "type": "string",
          "format": "date",
          "example": "2020-01-07"
        }
      },
      "startParam": {
        "in": "query",
        "name": "interval[start]",
        "description": "Start of matching interval",
        "required": true,
        "schema": {
          "type": "string",
          "format": "date",
          "example": "2020-01-01"
        }
      }
    },
    "requestBodies": {
      "Registry": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Registry"
            }
          }
        },
        "required": true
      },
      "RegistryData": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RegistryData"
            }
          }
        },
        "required": true
      },
      "Timereport": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Timereport"
            }
          }
        },
        "required": true
      }
    },
    "securitySchemes": {
      "TZApiAuth": {
        "type": "oauth2",
        "scheme": "bearer",
        "name": "Authorization",
        "in": "header",
        "bearerFormat": "JWT",
        "description": "OAuth2 API authentication",
        "openIdConnectUrl": "https://api.timezynk.com/api/oauth2/v1/userinfo",
        "flows": {
          "password": {
            "tokenUrl": "https://api.timezynk.com/api/oauth2/v1/token",
            "scopes": {
              "read:company": "Read all company information",
              "write:company": "Write all company information",
              "read:user": "Read all user information",
              "write:user": "Write all user information",
              "write:availability": "Create, update and delete availability for logged in user"
            }
          },
          "authorizationCode": {
            "authorizationUrl": "https://api.timezynk.com/api/oauth2/v1/auth",
            "tokenUrl": "https://api.timezynk.com/api/oauth2/v1/token",
            "scopes": {
              "read:company": "Read all company information",
              "write:company": "Write all company information",
              "read:user": "Read all user information",
              "write:user": "Write all user information",
              "write:availability": "Create, update and delete availability for logged in user"
            }
          },
          "clientCredentials": {
            "tokenUrl": "https://api.timezynk.com/api/oauth2/v1/token",
            "scopes": {
              "read:company": "Read all company information",
              "write:company": "Write all company information"
            }
          }
        }
      }
    }
  }
}
